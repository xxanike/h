{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"DEPLOYMENT.md":{"content":"# Deployment Guide\n\nThis is a **fullstack application** with Express backend + React frontend. Here's how to deploy it properly:\n\n---\n\n## ‚ö†Ô∏è Important: Backend vs Frontend\n\nThis app has TWO parts:\n1. **Frontend** - React app (static files)\n2. **Backend** - Express API server (Node.js server)\n\n**Most static hosting platforms (Netlify, Vercel, GitHub Pages) only support frontend static files.**\n\n---\n\n## üéØ Recommended: Deploy on Replit (Easiest!)\n\nReplit supports fullstack apps natively - both frontend and backend work out of the box!\n\n### Steps:\n1. Click the **Deploy** button in Replit\n2. Your app will be live at `https://your-repl-name.replit.app`\n3. Add this domain to Firebase Authorized Domains (see Firebase Setup below)\n\n‚úÖ **Pros**: Zero configuration, works instantly, free tier available\n‚ùå **Cons**: Requires Replit account\n\n---\n\n## üöÄ Option 1: Render.com (Best Free Alternative)\n\nRender.com supports fullstack Node.js apps with a generous free tier.\n\n### Steps:\n\n1. **Create Render Account**: Go to [render.com](https://render.com) and sign up\n\n2. **Connect Your GitHub Repo**: \n   - Push this code to GitHub\n   - In Render dashboard, click \"New +\" ‚Üí \"Web Service\"\n   - Connect your GitHub repository\n\n3. **Configure Service** (Render will auto-detect from `render.yaml`):\n   - Build Command: `npm install && npm run build`\n   - Start Command: `npm start`\n   - Set environment variables (see Environment Variables section below)\n\n4. **Deploy**: Click \"Create Web Service\"\n\n‚úÖ **Pros**: Free tier, supports fullstack apps, auto-deploys from Git\n‚ùå **Cons**: Free tier spins down after 15 min of inactivity\n\n---\n\n## üåê Option 2: Railway.app\n\nSimilar to Render, supports fullstack Node.js apps.\n\n### Steps:\n\n1. **Create Railway Account**: Go to [railway.app](https://railway.app)\n\n2. **New Project from GitHub**:\n   - Click \"New Project\"\n   - Select \"Deploy from GitHub repo\"\n   - Choose your repository\n\n3. **Configure**:\n   - Railway auto-detects Node.js\n   - Add environment variables (see below)\n   - Set start command to `npm start`\n\n4. **Deploy**: Railway automatically deploys\n\n‚úÖ **Pros**: Very developer-friendly, free $5/month credit\n‚ùå **Cons**: Requires credit card after trial\n\n---\n\n## üì¶ Option 3: Split Deployment (Frontend + Backend Separate)\n\nDeploy frontend and backend to different services.\n\n### Frontend ‚Üí Netlify/Vercel\n1. Build frontend: `npm run build`\n2. Deploy `dist/public/` folder to Netlify or Vercel\n3. Configure environment variables with `VITE_` prefix\n\n### Backend ‚Üí Render/Railway\n1. Create a separate repo with just `server/` folder\n2. Update package.json to only run backend\n3. Deploy to Render or Railway\n\n‚ö†Ô∏è **Note**: You'll need to configure CORS and update API URLs\n\n---\n\n## üîß Environment Variables\n\nAll deployment platforms need these environment variables:\n\n### Required:\n```\nVITE_FIREBASE_PROJECT_ID=your-project-id\nVITE_FIREBASE_APP_ID=1:123456:web:abc123\nVITE_FIREBASE_API_KEY=AIzaSyXXXXXXXXXXXX\nSESSION_SECRET=your-random-32-char-secret\n```\n\n### Optional:\n```\nMARKETPLACE_UPI_ID=your-upi@id\nMARKETPLACE_QR_IMAGE_PATH=your-qr-code.png\nFIREBASE_SERVICE_ACCOUNT={\"type\":\"service_account\",...}\nDISCORD_WEBHOOK_URL=your-discord-webhook\n```\n\n---\n\n## üî• Firebase Setup for Deployment\n\nAfter deploying, update Firebase settings:\n\n1. Go to [Firebase Console](https://console.firebase.google.com)\n2. Select your project\n3. Go to **Authentication** ‚Üí **Settings** ‚Üí **Authorized domains**\n4. Add your deployment domain:\n   - Replit: `your-repl.replit.app`\n   - Render: `your-service.onrender.com`\n   - Railway: `your-app.up.railway.app`\n   - Netlify: `your-site.netlify.app`\n\n---\n\n## üìù Static Hosting (Frontend Only)\n\nIf you ONLY want to deploy the frontend (without backend functionality):\n\n### Netlify\n```bash\nnpm run build\n# Upload dist/public/ folder\n```\n\n### Vercel\n```bash\nnpm run build\nvercel --prod\n```\n\n### GitHub Pages\n```bash\nnpm run build\n# Deploy dist/public/ to gh-pages branch\n```\n\n‚ö†Ô∏è **Warning**: Backend features (authentication, file uploads, database) won't work without a backend server!\n\n---\n\n## üé® Quick Comparison\n\n| Platform | Type | Backend Support | Free Tier | Best For |\n|----------|------|-----------------|-----------|----------|\n| **Replit** | Fullstack | ‚úÖ Yes | ‚úÖ Yes | Fastest setup |\n| **Render** | Fullstack | ‚úÖ Yes | ‚úÖ Yes | Production apps |\n| **Railway** | Fullstack | ‚úÖ Yes | ‚úÖ $5 credit | Modern apps |\n| **Netlify** | Static | ‚ùå No | ‚úÖ Yes | Frontend only |\n| **Vercel** | Static | ‚ö†Ô∏è Serverless | ‚úÖ Yes | Frontend only |\n\n---\n\n## ‚úÖ Post-Deployment Checklist\n\n- [ ] App is accessible at deployment URL\n- [ ] Firebase Authorized Domain is updated\n- [ ] Environment variables are set correctly\n- [ ] Google Sign-in works\n- [ ] File uploads work\n- [ ] Payment QR code displays correctly\n- [ ] Admin panel is accessible\n- [ ] Created first admin user in Firestore\n\n---\n\n## üêõ Troubleshooting\n\n### \"Firebase: Error (auth/unauthorized-domain)\"\n‚Üí Add your deployment domain to Firebase Authorized Domains\n\n### \"API endpoints return 404\"\n‚Üí You're using static hosting (Netlify/Vercel). Use Render/Railway instead.\n\n### \"Application error\" or \"Cannot find module\"\n‚Üí Check build logs, ensure all dependencies are in `package.json` (not devDependencies)\n\n### \"CORS errors\"\n‚Üí If using split deployment, configure CORS in backend to allow frontend domain\n\n---\n\n## üìû Need Help?\n\n- Check logs in your deployment platform\n- Review Firestore security rules\n- Ensure all environment variables are set\n- Verify Firebase configuration\n\nHappy deploying! üöÄ\n","size_bytes":5614},"GOOGLE_OAUTH_SETUP.md":{"content":"# Google OAuth Setup Guide\n\n## ‚ö†Ô∏è Important: Do You Need This?\n\n**Your app already uses Firebase Authentication for Google Sign-in!**\n\nYou only need Google OAuth Client ID & Secret if you want to:\n- Access additional Google APIs (Drive, Calendar, Gmail, etc.)\n- Use Google OAuth independently from Firebase\n- Implement server-side Google authentication\n\n**For basic Google Sign-in, Firebase handles everything automatically - no extra setup needed!**\n\n---\n\n## When You DO Need Google OAuth Credentials\n\nIf you need extended Google API access, follow these steps:\n\n### Step 1: Create OAuth Credentials\n\n1. **Go to Google Cloud Console**\n   - Visit: https://console.cloud.google.com/apis/credentials\n   - Select your Firebase project (or create a new project)\n\n2. **Enable Required APIs**\n   - Go to \"APIs & Services\" ‚Üí \"Library\"\n   - Search and enable the APIs you need (e.g., Google Drive API)\n\n3. **Create OAuth Client ID**\n   - Click \"Create Credentials\" ‚Üí \"OAuth client ID\"\n   - Choose \"Web application\"\n   - Name it: \"Senpai Marketplace OAuth\"\n\n4. **Configure Authorized Origins**\n   Add these URLs:\n   ```\n   http://localhost:5000\n   https://your-repl.replit.dev\n   https://your-deployment-domain.com\n   ```\n\n5. **Configure Redirect URIs**\n   Add these URLs:\n   ```\n   http://localhost:5000/auth/google/callback\n   https://your-repl.replit.dev/auth/google/callback\n   https://your-deployment-domain.com/auth/google/callback\n   ```\n\n6. **Copy Credentials**\n   - You'll see your **Client ID** and **Client Secret**\n   - Copy both values\n\n### Step 2: Add to Replit Secrets\n\n1. Open the **Secrets** tab (üîí icon) in Replit\n2. Add these two secrets:\n   ```\n   GOOGLE_CLIENT_ID=your-client-id-here.apps.googleusercontent.com\n   GOOGLE_CLIENT_SECRET=GOCSPX-your-client-secret-here\n   ```\n3. Save and restart your app\n\n### Step 3: Configure Firebase (if needed)\n\nIf you're using both Firebase Auth and Google OAuth:\n\n1. **Add OAuth Credentials to Firebase**\n   - Go to Firebase Console ‚Üí Authentication ‚Üí Sign-in method\n   - Click on Google provider\n   - Scroll to \"Web SDK configuration\"\n   - Add your Web Client ID and Client Secret\n\n2. **This enables**:\n   - Server-side token verification\n   - Access to Google APIs with user consent\n   - Offline access with refresh tokens\n\n---\n\n## Security Best Practices\n\n‚úÖ **DO:**\n- Store Client ID & Secret in Replit Secrets (never in code)\n- Use environment variables to access them\n- Restrict authorized domains to your actual domains\n- Use HTTPS in production\n- Regularly rotate secrets\n\n‚ùå **DON'T:**\n- Commit secrets to Git\n- Share secrets publicly\n- Use the same credentials for dev and production\n- Hardcode credentials in your code\n\n---\n\n## Environment Variables Reference\n\nAfter setup, your app will have access to:\n\n```javascript\n// Frontend (via import.meta.env)\nVITE_FIREBASE_API_KEY\nVITE_FIREBASE_PROJECT_ID\nVITE_FIREBASE_APP_ID\n\n// Backend (via process.env)\nGOOGLE_CLIENT_ID\nGOOGLE_CLIENT_SECRET\nSESSION_SECRET\nFIREBASE_SERVICE_ACCOUNT\n```\n\n---\n\n## Testing OAuth Setup\n\n1. **Check Configuration**\n   ```bash\n   # In Replit Shell\n   env | grep GOOGLE_CLIENT\n   ```\n\n2. **Test Sign-in Flow**\n   - Click \"Continue with Google\" in your app\n   - Should redirect to Google consent screen\n   - After approval, should redirect back to your app\n\n3. **Verify in Logs**\n   - Check Replit console for auth success messages\n   - No errors should appear\n\n---\n\n## Troubleshooting\n\n### \"Error 400: redirect_uri_mismatch\"\n‚Üí Add your exact redirect URI to Google Cloud Console\n\n### \"Error: invalid_client\"\n‚Üí Check Client ID and Secret are correct in Replit Secrets\n\n### \"Error 401: Unauthorized\"\n‚Üí Verify your domain is in Firebase Authorized Domains\n\n### OAuth popup blocked\n‚Üí User's browser is blocking popups. Ask them to allow popups for your site\n\n---\n\n## Quick Setup Checklist\n\n- [ ] Created OAuth Client ID in Google Cloud Console\n- [ ] Added authorized origins (localhost + deployment URL)\n- [ ] Added redirect URIs with `/auth/google/callback`\n- [ ] Copied Client ID to Replit Secrets as `GOOGLE_CLIENT_ID`\n- [ ] Copied Client Secret to Replit Secrets as `GOOGLE_CLIENT_SECRET`\n- [ ] Restarted the Replit app\n- [ ] Tested Google Sign-in\n- [ ] Verified no errors in console\n\n---\n\n## Need Help?\n\n- [Google OAuth Documentation](https://developers.google.com/identity/protocols/oauth2)\n- [Firebase Auth with Google](https://firebase.google.com/docs/auth/web/google-signin)\n- Check Replit logs for error messages\n- Verify all environment variables are set correctly\n\nRemember: **Most apps don't need these credentials!** Firebase Auth handles Google Sign-in automatically. Only add these if you specifically need extended Google API access.\n","size_bytes":4705},"server/firebase-admin.ts":{"content":"// Firebase Admin SDK initialization\nimport admin from \"firebase-admin\";\nimport { config } from \"./config\";\n\n// Initialize Firebase Admin SDK\n// Supports multiple authentication methods:\n// 1. Service account JSON string in FIREBASE_SERVICE_ACCOUNT env var\n// 2. Service account file path in GOOGLE_APPLICATION_CREDENTIALS env var\n// 3. Application Default Credentials (ADC) when running on Google Cloud/Replit\nif (!admin.apps.length) {\n  let adminConfig: admin.AppOptions = {\n    projectId: config.firebaseAdmin.projectId,\n  };\n\n  // Check if service account credentials are provided\n  if (config.firebaseAdmin.serviceAccount) {\n    try {\n      // Try to parse as JSON string first\n      const serviceAccount = JSON.parse(config.firebaseAdmin.serviceAccount);\n      adminConfig.credential = admin.credential.cert(serviceAccount);\n      console.log(\"‚úÖ Firebase Admin initialized with service account credentials\");\n    } catch (e) {\n      // If parsing fails, it might be a file path\n      // Security: Only allow absolute paths or paths starting with ./ to prevent path traversal\n      const path = config.firebaseAdmin.serviceAccount;\n      if (path.endsWith('.json') && (path.startsWith('/') || path.startsWith('./'))) {\n        try {\n          const fs = require('fs');\n          const serviceAccountJson = JSON.parse(fs.readFileSync(path, 'utf8'));\n          adminConfig.credential = admin.credential.cert(serviceAccountJson);\n          console.log(\"‚úÖ Firebase Admin initialized with service account file\");\n        } catch (fileError) {\n          console.error(\"‚ùå Failed to read service account file:\", fileError);\n          console.warn(\"‚ö†Ô∏è  Using Application Default Credentials (ADC) as fallback\");\n        }\n      } else {\n        console.warn(\"‚ö†Ô∏è  Invalid FIREBASE_SERVICE_ACCOUNT format. Expected JSON string or valid file path.\");\n        console.warn(\"‚ö†Ô∏è  Using Application Default Credentials (ADC) as fallback\");\n      }\n    }\n  } else {\n    console.log(\"‚ÑπÔ∏è  Firebase Admin initialized with Application Default Credentials (ADC)\");\n  }\n\n  admin.initializeApp(adminConfig);\n}\n\nexport const adminAuth = admin.auth();\nexport const adminDb = admin.firestore();\nexport const adminStorage = admin.storage();\n\n// Helper to verify Firebase ID token\nexport async function verifyIdToken(token: string) {\n  try {\n    const decodedToken = await adminAuth.verifyIdToken(token);\n    return decodedToken;\n  } catch (error) {\n    throw new Error(\"Invalid authentication token\");\n  }\n}\n","size_bytes":2507},"server/middleware/auth.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { verifyIdToken, adminDb } from \"../firebase-admin\";\n\n// Extend Express Request to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        uid: string;\n        email: string;\n        role: string;\n        displayName: string;\n      };\n    }\n  }\n}\n\n// Middleware to verify Firebase authentication\nexport async function authenticate(req: Request, res: Response, next: NextFunction) {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader?.startsWith(\"Bearer \")) {\n      return res.status(401).json({ error: \"No authentication token provided\" });\n    }\n\n    const token = authHeader.split(\"Bearer \")[1];\n    const decodedToken = await verifyIdToken(token);\n\n    // Fetch user data from Firestore\n    const userDoc = await adminDb.collection(\"users\").doc(decodedToken.uid).get();\n    \n    if (!userDoc.exists) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    const userData = userDoc.data();\n    \n    req.user = {\n      uid: decodedToken.uid,\n      email: decodedToken.email || \"\",\n      role: userData?.role || \"buyer\",\n      displayName: userData?.displayName || \"\",\n    };\n\n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    return res.status(401).json({ error: \"Authentication failed\" });\n  }\n}\n\n// Middleware to check if user is admin\nexport function requireAdmin(req: Request, res: Response, next: NextFunction) {\n  if (req.user?.role !== \"admin\") {\n    return res.status(403).json({ error: \"Admin access required\" });\n  }\n  next();\n}\n\n// Middleware to check if user is seller or admin\nexport function requireSeller(req: Request, res: Response, next: NextFunction) {\n  if (req.user?.role !== \"seller\" && req.user?.role !== \"admin\") {\n    return res.status(403).json({ error: \"Seller access required\" });\n  }\n  next();\n}\n","size_bytes":1929},"client/src/pages/Login.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Package, CreditCard } from \"lucide-react\";\nimport { SiGoogle } from \"react-icons/si\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Redirect } from \"wouter\";\n\nexport default function Login() {\n  const { user, signIn } = useAuth();\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 via-background to-chart-2/10 px-4\">\n      <div className=\"max-w-6xl w-full grid md:grid-cols-2 gap-8 items-center\">\n        {/* Branding Section */}\n        <div className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl md:text-5xl font-bold\" data-testid=\"text-login-title\">\n              Senpai Network\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Secure Digital Marketplace\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <Package className=\"h-6 w-6 text-primary mt-1\" />\n              <div>\n                <h3 className=\"font-semibold mb-1\">List & Sell Products</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Upload your digital products and reach buyers instantly\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <CreditCard className=\"h-6 w-6 text-chart-2 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold mb-1\">Secure UPI Payments</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Pay safely with QR codes and transaction verification\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <Shield className=\"h-6 w-6 text-chart-3 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold mb-1\">Admin Verified</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  All products and payments reviewed for safety\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Login Card */}\n        <Card className=\"shadow-xl\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">Welcome Back</CardTitle>\n            <CardDescription>\n              Sign in with your Google account to continue\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Button\n              size=\"lg\"\n              className=\"w-full text-lg\"\n              onClick={signIn}\n              data-testid=\"button-google-signin\"\n            >\n              <SiGoogle className=\"h-5 w-5 mr-2\" />\n              Continue with Google\n            </Button>\n\n            <div className=\"text-center text-sm text-muted-foreground\">\n              <p>By continuing, you agree to our Terms of Service</p>\n              <p>and Privacy Policy</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3322},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"design_guidelines.md":{"content":"# Senpai Network Marketplace - Design Guidelines\n\n## Design Approach: Utility-First Marketplace System\n\n**Selected Approach**: Design System (Material Design principles adapted for marketplace functionality)\n\n**Justification**: This is a transaction-heavy, multi-role platform (buyer/seller/admin) requiring clear information hierarchy, efficient workflows, and trust-building elements. The design prioritizes usability, clear status indicators, and seamless payment verification flows over pure visual appeal.\n\n**Key Principles**:\n- Role-based interface clarity (distinct visual treatments for buyer/seller/admin views)\n- Trust and transparency (clear payment flows, status indicators, verification badges)\n- Efficient admin workflows (quick-scan tables, one-click actions)\n- Mobile-first responsive design for Indian market accessibility\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode**:\n- Primary Brand: 245 65% 50% (vibrant purple-blue, trust and technology)\n- Primary Hover: 245 65% 45%\n- Secondary: 200 75% 45% (bright cyan for actions and highlights)\n- Background: 0 0% 98% (soft off-white)\n- Surface: 0 0% 100% (pure white for cards)\n- Text Primary: 220 15% 15% (deep charcoal)\n- Text Secondary: 220 10% 45% (medium gray)\n- Border: 220 13% 91% (subtle borders)\n\n**Dark Mode**:\n- Primary Brand: 245 70% 60% (brightened for contrast)\n- Primary Hover: 245 70% 55%\n- Secondary: 200 80% 50%\n- Background: 220 15% 10% (deep charcoal)\n- Surface: 220 15% 13% (elevated surfaces)\n- Text Primary: 0 0% 95% (near white)\n- Text Secondary: 220 10% 65%\n- Border: 220 15% 20%\n\n**Status Colors** (consistent across modes):\n- Success: 142 72% 45% (approved/verified)\n- Warning: 38 92% 50% (pending actions)\n- Error: 4 90% 58% (rejected/failed)\n- Info: 210 100% 56% (neutral information)\n\n**Trust Elements**:\n- Verified Badge: 142 72% 45% with checkmark\n- Admin Highlight: 280 55% 50% (distinct purple for admin actions)\n\n### B. Typography\n\n**Font Stack**:\n- Primary: 'Inter', system-ui, -apple-system, sans-serif (clean, modern, excellent readability)\n- Monospace: 'JetBrains Mono', 'Courier New', monospace (for transaction IDs, UTR codes)\n\n**Scale**:\n- Hero/Page Title: text-4xl md:text-5xl font-bold (36-48px)\n- Section Heading: text-2xl md:text-3xl font-semibold (24-30px)\n- Card Title: text-xl font-semibold (20px)\n- Body Large: text-lg (18px) - for important CTAs and labels\n- Body: text-base (16px) - default body text\n- Body Small: text-sm (14px) - meta information, helper text\n- Caption: text-xs (12px) - timestamps, secondary info\n- Transaction IDs: font-mono text-sm (monospace for easy reading)\n\n**Weights**:\n- Bold: 700 (headings, CTAs)\n- Semibold: 600 (subheadings, card titles)\n- Medium: 500 (emphasized body text)\n- Regular: 400 (body text)\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16, 20 for consistent rhythm\n- Component padding: p-4 to p-6\n- Section spacing: py-12 to py-20\n- Card gaps: gap-4 to gap-6\n- Element margins: m-2, m-4, m-8\n\n**Breakpoints**:\n- Mobile: base (default)\n- Tablet: md: 768px\n- Desktop: lg: 1024px\n- Wide: xl: 1280px\n\n**Container Strategy**:\n- Max width: max-w-7xl (1280px) for main content\n- Gutters: px-4 md:px-6 lg:px-8\n- Product grids: 1 column mobile, 2-3 tablet, 3-4 desktop\n\n### D. Component Library\n\n**Navigation**:\n- Sticky header with shadow on scroll\n- Logo left, nav center, profile/settings right\n- Mobile: hamburger menu with slide-out drawer\n- Active state: border-b-2 with primary color\n\n**Product Cards**:\n- Rounded-lg borders with subtle shadow (shadow-sm hover:shadow-md)\n- Thumbnail 16:9 aspect ratio with object-cover\n- Price prominent (text-2xl font-bold primary color)\n- Tag pills with subtle backgrounds (bg-primary/10 text-primary)\n- Status badge top-right (approved/pending/rejected)\n\n**Floating Upload Button**:\n- Fixed bottom-right (bottom-6 right-6)\n- Large circular button (w-16 h-16)\n- Primary gradient with white + icon\n- Shadow-lg with pulse animation on hover\n- Desktop: expands to show \"Upload Product\" text on hover\n- Mobile: stays circular with just + icon\n\n**Buy Modal**:\n- Center screen overlay with backdrop blur\n- Two-column layout: QR code left (lg:w-1/2), instructions right\n- QR code: border-4 border-primary rounded-xl p-4 white background\n- Payment amount: large, bold (text-3xl) in primary color\n- Transaction ID input: full-width with monospace font\n- \"Verify Payment\" CTA: full-width gradient button\n\n**Admin Panel Components**:\n- Data tables with alternating row backgrounds\n- Quick action buttons in each row (Approve/Reject with icon-only on mobile)\n- Filter/search bar sticky at top\n- Audit log: timeline view with timestamps and user avatars\n- File download: icon button with tooltip\n\n**Forms**:\n- Labels: text-sm font-medium mb-2\n- Inputs: border-2 rounded-lg p-3 focus:border-primary transition\n- File upload: dashed border drag-and-drop zone with upload icon\n- Textarea: min-h-32 with resize capability\n- Validation: red border + error text below for invalid fields\n\n**Status Indicators**:\n- Pending: warning color with clock icon\n- Approved: success color with checkmark icon  \n- Rejected: error color with X icon\n- Verified: success color with shield-check icon\n- Dot indicators for list views, full badges for detail views\n\n**Seller Dashboard**:\n- Stats cards row: Total Products, Pending Approval, Total Earnings (grid-cols-1 md:grid-cols-3)\n- Product management table with inline edit/delete actions\n- Commission breakdown: visual split showing 70/30 with percentages\n\n### E. Animations\n\nUse sparingly and purposefully:\n- Page transitions: fade-in (150ms ease-out)\n- Card hover: scale-102 transform with shadow growth (200ms)\n- Button interactions: bg color transitions (150ms)\n- Modal open/close: fade + scale from center (200ms)\n- Loading states: spin animation for icons, pulse for skeletons\n- Success actions: subtle scale-up (120%) then scale-down checkmark\n- NO scroll-triggered animations or parallax effects\n\n---\n\n## Images\n\n**QR Code Display**:\n- Location: Buy modal center-left section\n- Treatment: White background, 4px primary border, rounded corners (xl)\n- Size: 280x280px on desktop, 240x240px on mobile\n- File: `/static/scan here.png` served as static asset\n- Context: Accompanied by \"Scan to Pay\" heading and UPI ID display\n\n**Product Thumbnails**:\n- All product cards require thumbnail images\n- Aspect ratio: 16:9 or 4:3 (consistent per grid)\n- Placeholder: Gradient background with upload icon when no image\n- Treatment: object-cover with rounded-t-lg (matches card border radius)\n\n**Profile/Admin Avatars**:\n- Google profile pictures for logged-in users\n- Size: 40x40px in navbar, 80x80px in profile page\n- Fallback: Colored circle with user initials (using primary color variants)\n\n**Hero Section**: NO traditional hero image\n- Replace with prominent feature showcase: 3-card grid highlighting \"List Products\", \"Secure Payments\", \"Admin Verified\" with icons and gradients\n- Background: Subtle gradient mesh (primary to secondary at 120deg, low opacity 10%)\n\n**Empty States**:\n- Illustrative icons (not full images) for:\n  - No products listed: shopping bag icon\n  - No orders: receipt icon  \n  - Pending verification: hourglass icon\n- SVG icons from Heroicons, 80x80px in muted gray\n\n---\n\n## Page-Specific Layouts\n\n**Home Page**:\n- Minimal header: \"Browse Marketplace\" with search bar\n- Filter chips row (All, Documents, Media, Code, etc.)\n- Product grid: gap-6, responsive columns (1/2/3/4)\n- Each card: hover lift effect, quick-view on click\n\n**Product Detail**:\n- Breadcrumb navigation (Home > Category > Product)\n- Two-column: image/preview left (60%), details right (40%)\n- Sticky Buy button on scroll\n- Seller info card below: avatar, name, rating (if implemented), verified badge\n\n**Profile (Seller View)**:\n- Top stats dashboard (3 cards)\n- Tab navigation: My Products | Earnings | Payouts\n- Products table with status column and actions\n- Upload history with approval status timeline\n\n**Admin Panel**:\n- Sidebar navigation (desktop), bottom tabs (mobile)\n- Sections: Pending Approvals | Payment Verification | Product Management | Audit Logs\n- Table-heavy design with bulk actions (checkboxes + action bar)\n- Real-time status updates with optimistic UI\n\n**Settings**:\n- Single column form layout (max-w-2xl centered)\n- Sections: Account, Notifications, Role Management (admin only), Security\n- Save button sticky at bottom on mobile","size_bytes":8419},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/AppSidebar.tsx":{"content":"import { Home, ShoppingBag, User, Settings, Shield, Package } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\n\nconst menuItems = [\n  { title: \"Home\", url: \"/\", icon: Home },\n  { title: \"My Products\", url: \"/profile\", icon: Package, role: \"seller\" },\n  { title: \"Settings\", url: \"/settings\", icon: Settings },\n];\n\nconst adminItems = [\n  { title: \"Admin Panel\", url: \"/admin\", icon: Shield, role: \"admin\" },\n];\n\nexport function AppSidebar() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const isActive = (url: string) => location === url;\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-lg font-semibold\">\n            Senpai Network\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => {\n                if (item.role && user?.role !== item.role && user?.role !== \"admin\") {\n                  return null;\n                }\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      asChild\n                      data-active={isActive(item.url)}\n                      data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"w-5 h-5\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {user?.role === \"admin\" && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Administration</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {adminItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      asChild\n                      data-active={isActive(item.url)}\n                      data-testid=\"link-admin-panel\"\n                    >\n                      <Link href={item.url}>\n                        <item.icon className=\"w-5 h-5\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n\n      {user && (\n        <SidebarFooter className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarImage src={user.photoURL} alt={user.displayName} />\n              <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                {user.displayName.charAt(0).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium truncate\" data-testid=\"text-user-name\">\n                {user.displayName}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {user.role}\n              </p>\n            </div>\n          </div>\n        </SidebarFooter>\n      )}\n    </Sidebar>\n  );\n}\n","size_bytes":3816},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, type ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1111},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { auth } from \"./firebase\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// Helper to get Firebase ID token\nasync function getAuthHeaders(): Promise<HeadersInit> {\n  const user = auth.currentUser;\n  if (user) {\n    const token = await user.getIdToken();\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  }\n  return {};\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = await getAuthHeaders();\n  \n  const res = await fetch(url, {\n    method,\n    headers: {\n      ...authHeaders,\n      ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authHeaders = await getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: authHeaders,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1851},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/config.ts":{"content":"// Configuration file for environment variables\n// This reads from environment variables (.env file or Replit secrets)\n\nexport const config = {\n  // Firebase configuration (frontend)\n  firebase: {\n    projectId: process.env.VITE_FIREBASE_PROJECT_ID || \"\",\n    appId: process.env.VITE_FIREBASE_APP_ID || \"\",\n    apiKey: process.env.VITE_FIREBASE_API_KEY || \"\",\n  },\n  \n  // Firebase Admin SDK (backend)\n  firebaseAdmin: {\n    projectId: process.env.VITE_FIREBASE_PROJECT_ID || \"\",\n    // Service account credentials (JSON string or path)\n    serviceAccount: process.env.FIREBASE_SERVICE_ACCOUNT || \"\",\n  },\n  \n  // Marketplace configuration\n  marketplace: {\n    upiId: process.env.MARKETPLACE_UPI_ID || \"anikashyap07@fam\",\n    qrImagePath: process.env.MARKETPLACE_QR_IMAGE_PATH || \"scan here_1760606417275.png\",\n    commissionRate: parseFloat(process.env.MARKETPLACE_COMMISSION_RATE || \"0.3\"),\n    sellerRate: parseFloat(process.env.MARKETPLACE_SELLER_RATE || \"0.7\"),\n  },\n\n  // Optional: Discord webhook for notifications (placeholder)\n  discord: {\n    webhookUrl: process.env.DISCORD_WEBHOOK_URL || \"\",\n  },\n\n  // Session secret (required for session management)\n  sessionSecret: process.env.SESSION_SECRET || \"\",\n\n  // Google OAuth (optional - only needed for extended Google API access)\n  // Firebase Auth handles Google Sign-in without these\n  googleOAuth: {\n    clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n  },\n\n  // File upload limits\n  upload: {\n    maxThumbnailSize: parseInt(process.env.MAX_THUMBNAIL_SIZE || \"5242880\"), // 5MB default\n    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || \"104857600\"), // 100MB default\n    allowedThumbnailTypes: [\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"],\n    allowedFileTypes: (process.env.ALLOWED_FILE_TYPES || \"\").split(\",\").filter(Boolean),\n  },\n\n  // Admin email notifications (optional placeholder)\n  admin: {\n    notificationEmail: process.env.ADMIN_NOTIFICATION_EMAIL || \"\",\n  },\n\n  // Environment\n  isDevelopment: process.env.NODE_ENV === \"development\",\n  isProduction: process.env.NODE_ENV === \"production\",\n};\n\n// Helper to check if Firebase is configured\nexport function isFirebaseConfigured(): boolean {\n  return !!(config.firebase.projectId && config.firebase.appId && config.firebase.apiKey);\n}\n\n// Helper to check if Firebase Admin is configured\nexport function isFirebaseAdminConfigured(): boolean {\n  return !!(config.firebaseAdmin.projectId);\n}\n\n// Validate required configuration\nexport function validateConfig(): { valid: boolean; missing: string[] } {\n  const missing: string[] = [];\n\n  if (!config.firebase.projectId) missing.push(\"VITE_FIREBASE_PROJECT_ID\");\n  if (!config.firebase.appId) missing.push(\"VITE_FIREBASE_APP_ID\");\n  if (!config.firebase.apiKey) missing.push(\"VITE_FIREBASE_API_KEY\");\n  if (!config.sessionSecret) {\n    missing.push(\"SESSION_SECRET\");\n  }\n  if (!config.marketplace.upiId) missing.push(\"MARKETPLACE_UPI_ID\");\n\n  return {\n    valid: missing.length === 0,\n    missing,\n  };\n}\n\n// Validate configuration at startup and fail fast if critical config is missing\nexport function validateConfigOrExit(): void {\n  const validation = validateConfig();\n  \n  if (!validation.valid) {\n    console.error(\"‚ùå Configuration Error: Missing required environment variables:\");\n    validation.missing.forEach(key => console.error(`   - ${key}`));\n    console.error(\"\\nPlease check your .env file or Replit Secrets.\");\n    console.error(\"See .env.example for required configuration.\\n\");\n    process.exit(1);\n  }\n  \n  console.log(\"‚úÖ Configuration validated successfully\");\n}\n","size_bytes":3627},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"render.yaml":{"content":"# Render.com deployment configuration\n# This is the RECOMMENDED deployment option for this fullstack app\n# Render supports both static sites and Node.js web services\n\nservices:\n  # Backend API Server\n  - type: web\n    name: senpai-marketplace-api\n    env: node\n    region: oregon\n    plan: free\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: VITE_FIREBASE_PROJECT_ID\n        sync: false\n      - key: VITE_FIREBASE_APP_ID\n        sync: false\n      - key: VITE_FIREBASE_API_KEY\n        sync: false\n      - key: SESSION_SECRET\n        generateValue: true\n      - key: MARKETPLACE_UPI_ID\n        value: anikashyap07@fam\n      - key: FIREBASE_SERVICE_ACCOUNT\n        sync: false\n    healthCheckPath: /api/config/marketplace\n\n# Note: This deploys the entire fullstack app as a single service\n# The backend serves both the API and the static frontend files\n","size_bytes":952},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { authenticate, requireAdmin, requireSeller } from \"./middleware/auth\";\nimport { adminDb, adminStorage, adminAuth } from \"./firebase-admin\";\nimport { config } from \"./config\";\n\n// Configure multer for file uploads (memory storage)\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: config.upload.maxFileSize,\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.get(\"/api/auth/me\", authenticate, async (req, res) => {\n    try {\n      const userDoc = await adminDb.collection(\"users\").doc(req.user!.uid).get();\n      \n      if (!userDoc.exists) {\n        // Create user if doesn't exist (first login)\n        const newUser = {\n          id: req.user!.uid,\n          email: req.user!.email,\n          displayName: req.user!.displayName,\n          photoURL: (await adminAuth.getUser(req.user!.uid)).photoURL || \"\",\n          role: \"buyer\",\n          createdAt: new Date().toISOString(),\n        };\n        \n        await adminDb.collection(\"users\").doc(req.user!.uid).set(newUser);\n        return res.json(newUser);\n      }\n      \n      res.json({ id: userDoc.id, ...userDoc.data() });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Marketplace configuration endpoint (authenticated for security)\n  app.get(\"/api/config/marketplace\", authenticate, async (req, res) => {\n    try {\n      // Return public marketplace configuration\n      // Only expose non-sensitive data that's needed for the UI\n      // Do not expose file paths or other internal configuration\n      res.json({\n        upiId: config.marketplace.upiId,\n        commissionRate: config.marketplace.commissionRate,\n        sellerRate: config.marketplace.sellerRate,\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch marketplace config\" });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products/approved\", async (req, res) => {\n    try {\n      const snapshot = await adminDb.collection(\"products\")\n        .where(\"status\", \"==\", \"approved\")\n        .orderBy(\"createdAt\", \"desc\")\n        .get();\n      \n      const products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const doc = await adminDb.collection(\"products\").doc(req.params.id).get();\n      \n      if (!doc.exists) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      res.json({ id: doc.id, ...doc.data() });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  app.get(\"/api/products/my\", authenticate, requireSeller, async (req, res) => {\n    try {\n      const snapshot = await adminDb.collection(\"products\")\n        .where(\"sellerId\", \"==\", req.user!.uid)\n        .orderBy(\"createdAt\", \"desc\")\n        .get();\n      \n      const products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  const uploadFields = upload.fields([\n    { name: \"thumbnail\", maxCount: 1 },\n    { name: \"file\", maxCount: 1 }\n  ]);\n\n  app.post(\"/api/products\", authenticate, requireSeller, uploadFields, async (req, res) => {\n    try {\n      const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n      const { title, description, price, tags } = req.body;\n\n      if (!files?.thumbnail || !files?.file) {\n        return res.status(400).json({ error: \"Missing required files\" });\n      }\n\n      const thumbnailFile = files.thumbnail[0];\n      const productFile = files.file[0];\n\n      // Validate thumbnail\n      if (!config.upload.allowedThumbnailTypes.includes(thumbnailFile.mimetype)) {\n        return res.status(400).json({ error: \"Invalid thumbnail type\" });\n      }\n\n      // Upload to Firebase Storage\n      const bucket = adminStorage.bucket(`${config.firebase.projectId}.appspot.com`);\n      \n      const thumbnailPath = `thumbnails/${req.user!.uid}/${Date.now()}_${thumbnailFile.originalname}`;\n      const filePath = `products/${req.user!.uid}/${Date.now()}_${productFile.originalname}`;\n\n      await bucket.file(thumbnailPath).save(thumbnailFile.buffer, {\n        metadata: { contentType: thumbnailFile.mimetype },\n      });\n\n      await bucket.file(filePath).save(productFile.buffer, {\n        metadata: { contentType: productFile.mimetype },\n      });\n\n      const thumbnailURL = `https://storage.googleapis.com/${bucket.name}/${thumbnailPath}`;\n      const fileURL = `https://storage.googleapis.com/${bucket.name}/${filePath}`;\n\n      // Create product document\n      const product = {\n        title,\n        description,\n        price: Number(price),\n        tags: JSON.parse(tags),\n        thumbnailURL,\n        fileURL,\n        fileName: productFile.originalname,\n        fileSize: productFile.size,\n        sellerId: req.user!.uid,\n        sellerName: req.user!.displayName,\n        sellerPhotoURL: (await adminAuth.getUser(req.user!.uid)).photoURL || \"\",\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n      };\n\n      const docRef = await adminDb.collection(\"products\").add(product);\n\n      // Optional: Discord webhook notification (placeholder)\n      if (config.discord.webhookUrl) {\n        // TODO: Send Discord webhook notification\n      }\n\n      res.json({ id: docRef.id, ...product });\n    } catch (error) {\n      console.error(\"Product upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload product\" });\n    }\n  });\n\n  // Order routes\n  app.post(\"/api/orders\", authenticate, async (req, res) => {\n    try {\n      const order = {\n        ...req.body,\n        status: \"pending_verification\",\n        createdAt: new Date().toISOString(),\n      };\n\n      const docRef = await adminDb.collection(\"orders\").add(order);\n      res.json({ id: docRef.id, ...order });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create order\" });\n    }\n  });\n\n  app.get(\"/api/orders/my\", authenticate, async (req, res) => {\n    try {\n      // Get orders where user is seller\n      const snapshot = await adminDb.collection(\"orders\")\n        .where(\"sellerId\", \"==\", req.user!.uid)\n        .orderBy(\"createdAt\", \"desc\")\n        .get();\n      \n      const orders = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/products/pending\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      const snapshot = await adminDb.collection(\"products\")\n        .where(\"status\", \"==\", \"pending\")\n        .orderBy(\"createdAt\", \"desc\")\n        .get();\n      \n      const products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pending products\" });\n    }\n  });\n\n  app.post(\"/api/admin/products/:id/approve\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      await adminDb.collection(\"products\").doc(req.params.id).update({\n        status: \"approved\",\n        approvedAt: new Date().toISOString(),\n      });\n\n      const productDoc = await adminDb.collection(\"products\").doc(req.params.id).get();\n      const product = productDoc.data();\n\n      // Log admin action\n      await adminDb.collection(\"admin_logs\").add({\n        action: \"approve_product\",\n        adminId: req.user!.uid,\n        adminName: req.user!.displayName,\n        targetId: req.params.id,\n        targetType: \"product\",\n        details: `Approved product: ${product?.title}`,\n        createdAt: new Date().toISOString(),\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to approve product\" });\n    }\n  });\n\n  app.post(\"/api/admin/products/:id/reject\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      const { reason } = req.body;\n      \n      await adminDb.collection(\"products\").doc(req.params.id).update({\n        status: \"rejected\",\n        rejectionReason: reason,\n      });\n\n      const productDoc = await adminDb.collection(\"products\").doc(req.params.id).get();\n      const product = productDoc.data();\n\n      // Log admin action\n      await adminDb.collection(\"admin_logs\").add({\n        action: \"reject_product\",\n        adminId: req.user!.uid,\n        adminName: req.user!.displayName,\n        targetId: req.params.id,\n        targetType: \"product\",\n        details: `Rejected product: ${product?.title} - Reason: ${reason}`,\n        createdAt: new Date().toISOString(),\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject product\" });\n    }\n  });\n\n  app.get(\"/api/admin/orders/pending\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      const snapshot = await adminDb.collection(\"orders\")\n        .where(\"status\", \"==\", \"pending_verification\")\n        .orderBy(\"createdAt\", \"desc\")\n        .get();\n      \n      const orders = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pending orders\" });\n    }\n  });\n\n  app.post(\"/api/admin/orders/:id/verify\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      const orderDoc = await adminDb.collection(\"orders\").doc(req.params.id).get();\n      const order = orderDoc.data();\n\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      // Get product to get download URL\n      const productDoc = await adminDb.collection(\"products\").doc(order.productId).get();\n      const product = productDoc.data();\n\n      await adminDb.collection(\"orders\").doc(req.params.id).update({\n        status: \"verified\",\n        downloadURL: product?.fileURL,\n        verifiedAt: new Date().toISOString(),\n      });\n\n      // Log admin action\n      await adminDb.collection(\"admin_logs\").add({\n        action: \"verify_payment\",\n        adminId: req.user!.uid,\n        adminName: req.user!.displayName,\n        targetId: req.params.id,\n        targetType: \"order\",\n        details: `Verified payment for order: ${order.productTitle} - Transaction: ${order.transactionId}`,\n        createdAt: new Date().toISOString(),\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to verify payment\" });\n    }\n  });\n\n  app.post(\"/api/admin/orders/:id/reject\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      await adminDb.collection(\"orders\").doc(req.params.id).update({\n        status: \"rejected\",\n      });\n\n      const orderDoc = await adminDb.collection(\"orders\").doc(req.params.id).get();\n      const order = orderDoc.data();\n\n      // Log admin action\n      await adminDb.collection(\"admin_logs\").add({\n        action: \"reject_payment\",\n        adminId: req.user!.uid,\n        adminName: req.user!.displayName,\n        targetId: req.params.id,\n        targetType: \"order\",\n        details: `Rejected payment for order: ${order?.productTitle} - Transaction: ${order?.transactionId}`,\n        createdAt: new Date().toISOString(),\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject payment\" });\n    }\n  });\n\n  app.get(\"/api/admin/products/:id/download\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      const productDoc = await adminDb.collection(\"products\").doc(req.params.id).get();\n      const product = productDoc.data();\n\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      // Log admin action\n      await adminDb.collection(\"admin_logs\").add({\n        action: \"download_file\",\n        adminId: req.user!.uid,\n        adminName: req.user!.displayName,\n        targetId: req.params.id,\n        targetType: \"product\",\n        details: `Downloaded file: ${product.fileName}`,\n        createdAt: new Date().toISOString(),\n      });\n\n      res.json({ downloadURL: product.fileURL });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get download URL\" });\n    }\n  });\n\n  app.get(\"/api/admin/logs\", authenticate, requireAdmin, async (req, res) => {\n    try {\n      const snapshot = await adminDb.collection(\"admin_logs\")\n        .orderBy(\"createdAt\", \"desc\")\n        .limit(50)\n        .get();\n      \n      const logs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch logs\" });\n    }\n  });\n\n  // Placeholder virus scan hook\n  async function virusScanHook(fileBuffer: Buffer): Promise<boolean> {\n    // TODO: Integrate with virus scanning service (e.g., ClamAV, VirusTotal)\n    // For now, return true (safe)\n    console.log(\"Virus scan hook called - implement real scanning here\");\n    return true;\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13368},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User Schema\nexport const userSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  displayName: z.string(),\n  photoURL: z.string().optional(),\n  role: z.enum([\"buyer\", \"seller\", \"admin\"]).default(\"buyer\"),\n  createdAt: z.string(),\n});\n\nexport type User = z.infer<typeof userSchema>;\n\nexport const insertUserSchema = userSchema.omit({ id: true, createdAt: true });\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// Product Schema\nexport const productSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  price: z.number().positive(),\n  tags: z.array(z.string()),\n  thumbnailURL: z.string(),\n  fileURL: z.string(),\n  fileName: z.string(),\n  fileSize: z.number(),\n  sellerId: z.string(),\n  sellerName: z.string(),\n  sellerPhotoURL: z.string().optional(),\n  status: z.enum([\"pending\", \"approved\", \"rejected\"]).default(\"pending\"),\n  rejectionReason: z.string().optional(),\n  createdAt: z.string(),\n  approvedAt: z.string().optional(),\n});\n\nexport type Product = z.infer<typeof productSchema>;\n\nexport const insertProductSchema = productSchema.omit({ \n  id: true, \n  createdAt: true, \n  approvedAt: true,\n  status: true,\n  rejectionReason: true \n});\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\n// Order Schema\nexport const orderSchema = z.object({\n  id: z.string(),\n  productId: z.string(),\n  productTitle: z.string(),\n  buyerId: z.string(),\n  buyerName: z.string(),\n  buyerEmail: z.string(),\n  sellerId: z.string(),\n  transactionId: z.string(),\n  amount: z.number().positive(),\n  status: z.enum([\"pending_verification\", \"verified\", \"rejected\"]).default(\"pending_verification\"),\n  downloadURL: z.string().optional(),\n  sellerEarnings: z.number(),\n  marketplaceCommission: z.number(),\n  createdAt: z.string(),\n  verifiedAt: z.string().optional(),\n});\n\nexport type Order = z.infer<typeof orderSchema>;\n\nexport const insertOrderSchema = orderSchema.omit({ \n  id: true, \n  createdAt: true, \n  verifiedAt: true,\n  status: true,\n  downloadURL: true \n});\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\n// Admin Log Schema\nexport const adminLogSchema = z.object({\n  id: z.string(),\n  action: z.enum([\n    \"approve_product\", \n    \"reject_product\", \n    \"verify_payment\", \n    \"reject_payment\",\n    \"download_file\",\n    \"update_role\"\n  ]),\n  adminId: z.string(),\n  adminName: z.string(),\n  targetId: z.string(),\n  targetType: z.enum([\"product\", \"order\", \"user\"]),\n  details: z.string(),\n  createdAt: z.string(),\n});\n\nexport type AdminLog = z.infer<typeof adminLogSchema>;\n\nexport const insertAdminLogSchema = adminLogSchema.omit({ id: true, createdAt: true });\nexport type InsertAdminLog = z.infer<typeof insertAdminLogSchema>;\n\n// Payout Schema\nexport const payoutSchema = z.object({\n  id: z.string(),\n  sellerId: z.string(),\n  sellerName: z.string(),\n  amount: z.number().positive(),\n  upiId: z.string(),\n  status: z.enum([\"pending\", \"completed\"]).default(\"pending\"),\n  orderIds: z.array(z.string()),\n  markedBy: z.string().optional(),\n  markedByName: z.string().optional(),\n  createdAt: z.string(),\n  completedAt: z.string().optional(),\n});\n\nexport type Payout = z.infer<typeof payoutSchema>;\n\nexport const insertPayoutSchema = payoutSchema.omit({ \n  id: true, \n  createdAt: true, \n  completedAt: true,\n  status: true \n});\nexport type InsertPayout = z.infer<typeof insertPayoutSchema>;\n","size_bytes":3401},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"netlify.toml":{"content":"[build]\n  # Build command - builds both frontend and backend\n  command = \"npm run build\"\n  # Publish directory - where the built frontend files are\n  publish = \"dist/public\"\n  # Functions directory - for serverless backend (Netlify doesn't support this Express setup)\n  \n[build.environment]\n  NODE_VERSION = \"20\"\n\n# Redirect all requests to index.html for client-side routing\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n# Note: This is a fullstack Express + React app\n# Netlify is designed for static sites or serverless functions\n# This configuration will only work for the FRONTEND static build\n# The backend Express API will NOT work on Netlify\n\n# For full functionality, you need to:\n# 1. Deploy frontend to Netlify (static files)\n# 2. Deploy backend to a service that supports Node.js servers:\n#    - Render.com (recommended, free tier available)\n#    - Railway.app \n#    - Fly.io\n#    - Heroku\n#    - Or use Replit Deployments (easiest option!)\n","size_bytes":972},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/lib/auth.ts":{"content":"// Authentication utilities\n// Reference: firebase_barebones_javascript blueprint\nimport { \n  signInWithRedirect, \n  getRedirectResult, \n  signOut as firebaseSignOut,\n  onAuthStateChanged,\n  type User as FirebaseUser\n} from \"firebase/auth\";\nimport { auth, googleProvider } from \"./firebase\";\n\nexport function signInWithGoogle() {\n  return signInWithRedirect(auth, googleProvider);\n}\n\nexport function signOut() {\n  return firebaseSignOut(auth);\n}\n\nexport function onAuthChange(callback: (user: FirebaseUser | null) => void) {\n  return onAuthStateChanged(auth, callback);\n}\n\nexport async function handleAuthRedirect() {\n  try {\n    const result = await getRedirectResult(auth);\n    if (result?.user) {\n      return result.user;\n    }\n  } catch (error) {\n    console.error(\"Auth redirect error:\", error);\n    throw error;\n  }\n}\n","size_bytes":825},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { validateConfigOrExit } from \"./config\";\n\n// Validate configuration before starting the server\nvalidateConfigOrExit();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2193},"replit.md":{"content":"# Senpai Network Marketplace\n\n## Project Overview\nA full-stack digital marketplace built with React, Express, Firebase, and Tailwind CSS. Features Google Sign-in authentication, UPI payment verification, product uploads with admin approval, and a comprehensive admin panel.\n\n## Tech Stack\n- **Frontend**: React, TypeScript, Tailwind CSS, Shadcn UI, React Query\n- **Backend**: Express, Node.js, TypeScript, Firebase Admin SDK\n- **Database**: Firebase Firestore\n- **Storage**: Firebase Storage  \n- **Authentication**: Firebase Auth (Google Sign-in only)\n\n## Key Features\n- üîê Google Sign-in authentication with role-based access (buyer/seller/admin)\n- üí≥ UPI payment system with QR code and manual admin verification\n- üì¶ Product upload and management for sellers\n- ‚úÖ Admin approval workflow for all products\n- üí∞ Automatic 70/30 commission split (seller/marketplace)\n- üìä Admin panel with product approvals, payment verification, and audit logs\n- üé® Responsive design with dark mode support\n- üîí Secure file uploads with Firebase Storage\n\n## Project Structure\n```\n‚îú‚îÄ‚îÄ client/                    # Frontend React app\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/       # Reusable UI components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/            # Page components (Home, Product, Profile, Settings, Admin, Login)\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ contexts/         # React contexts (Auth, Theme)\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/              # Utilities (Firebase, Auth, QueryClient)\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hooks/            # Custom hooks\n‚îú‚îÄ‚îÄ server/                   # Backend Express app\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts             # All API routes\n‚îÇ   ‚îú‚îÄ‚îÄ config.ts             # Environment configuration\n‚îÇ   ‚îú‚îÄ‚îÄ firebase-admin.ts     # Firebase Admin SDK setup\n‚îÇ   ‚îî‚îÄ‚îÄ middleware/auth.ts    # Authentication middleware\n‚îú‚îÄ‚îÄ shared/                   # Shared TypeScript types\n‚îÇ   ‚îî‚îÄ‚îÄ schema.ts             # Zod schemas for all data models\n‚îú‚îÄ‚îÄ attached_assets/          # Static assets (UPI QR code image)\n‚îî‚îÄ‚îÄ design_guidelines.md      # UI/UX design guidelines\n```\n\n## Data Models\n\n### User\n- `id` (string) - Firebase UID\n- `email` (string)\n- `displayName` (string)\n- `photoURL` (string, optional)\n- `role` (enum: \"buyer\" | \"seller\" | \"admin\")\n- `createdAt` (ISO timestamp)\n\n### Product\n- `id` (string)\n- `title` (string)\n- `description` (string)\n- `price` (number) - in rupees (‚Çπ)\n- `tags` (string[])\n- `thumbnailURL` (string) - Firebase Storage URL\n- `fileURL` (string) - Firebase Storage URL\n- `fileName` (string)\n- `fileSize` (number) - in bytes\n- `sellerId` (string)\n- `sellerName` (string)\n- `sellerPhotoURL` (string, optional)\n- `status` (enum: \"pending\" | \"approved\" | \"rejected\")\n- `rejectionReason` (string, optional)\n- `createdAt` (ISO timestamp)\n- `approvedAt` (ISO timestamp, optional)\n\n### Order\n- `id` (string)\n- `productId` (string)\n- `productTitle` (string)\n- `buyerId` (string)\n- `buyerName` (string)\n- `buyerEmail` (string)\n- `sellerId` (string)\n- `transactionId` (string) - 12-digit UTR number\n- `amount` (number) - payment amount in ‚Çπ\n- `status` (enum: \"pending_verification\" | \"verified\" | \"rejected\")\n- `downloadURL` (string, optional) - available after verification\n- `sellerEarnings` (number) - 70% of amount\n- `marketplaceCommission` (number) - 30% of amount\n- `createdAt` (ISO timestamp)\n- `verifiedAt` (ISO timestamp, optional)\n\n### AdminLog\n- `id` (string)\n- `action` (enum: \"approve_product\" | \"reject_product\" | \"verify_payment\" | \"reject_payment\" | \"download_file\" | \"update_role\")\n- `adminId` (string)\n- `adminName` (string)\n- `targetId` (string) - ID of affected resource\n- `targetType` (enum: \"product\" | \"order\" | \"user\")\n- `details` (string) - description of action\n- `createdAt` (ISO timestamp)\n\n## API Endpoints\n\n### Authentication\n- `GET /api/auth/me` - Get current user (creates user on first login)\n\n### Products\n- `GET /api/products/approved` - List all approved products (public)\n- `GET /api/products/:id` - Get single product (public)\n- `GET /api/products/my` - Get seller's products (seller only)\n- `POST /api/products` - Upload product with files (seller only)\n\n### Orders\n- `POST /api/orders` - Create order after payment\n- `GET /api/orders/my` - Get seller's orders (seller only)\n\n### Admin\n- `GET /api/admin/products/pending` - Get pending product approvals (admin only)\n- `POST /api/admin/products/:id/approve` - Approve product (admin only)\n- `POST /api/admin/products/:id/reject` - Reject product with reason (admin only)\n- `GET /api/admin/orders/pending` - Get pending payment verifications (admin only)\n- `POST /api/admin/orders/:id/verify` - Verify payment and grant download access (admin only)\n- `POST /api/admin/orders/:id/reject` - Reject payment (admin only)\n- `GET /api/admin/products/:id/download` - Download product file for verification (admin only)\n- `GET /api/admin/logs` - Get admin action audit logs (admin only)\n\n## User Roles & Permissions\n\n### Buyer (Default)\n- Browse approved products\n- Purchase products via UPI\n- View order history\n- Cannot upload products\n\n### Seller\n- All buyer permissions\n- Upload products (pending approval)\n- View own products and their status\n- View earnings from verified orders\n- Track approval status\n\n### Admin\n- All seller permissions\n- Approve/reject product uploads\n- Verify/reject payment submissions\n- Download any file for verification\n- View complete audit log of admin actions\n- All actions are automatically logged\n\n## User Flows\n\n### First-Time Login Flow\n1. User clicks \"Continue with Google\" on login page\n2. Firebase Auth redirects to Google Sign-in\n3. On redirect back, user is created in Firestore with role \"buyer\"\n4. User is redirected to home page\n\n### Seller Product Upload Flow\n1. Seller clicks floating \"+\" button or \"Upload Product\"\n2. Fills form: title, description, price, tags\n3. Uploads thumbnail image (max 5MB) and product file (max 100MB)\n4. Files uploaded to Firebase Storage\n5. Product created in Firestore with status \"pending\"\n6. Admin receives notification (optional Discord webhook)\n7. Seller sees product in \"My Products\" with \"pending\" badge\n\n### Admin Product Approval Flow\n1. Admin navigates to Admin Panel ‚Üí Pending Approvals\n2. Reviews product details, thumbnail, and metadata\n3. Can download file for verification\n4. Clicks \"Approve\" or \"Reject\" (with reason)\n5. Status updated in Firestore\n6. Action logged to admin_logs collection\n7. Product appears in marketplace (if approved)\n\n### Buyer Purchase Flow\n1. Buyer browses approved products on home page\n2. Clicks \"Buy Now\" on desired product\n3. Modal shows:\n   - UPI QR code (scan here.png)\n   - UPI ID: anikashyap07@fam\n   - Product price\n4. Buyer scans QR with UPI app and pays\n5. Buyer enters 12-digit Transaction ID (UTR) and amount\n6. Order created with status \"pending_verification\"\n7. Admin receives notification (optional)\n\n### Admin Payment Verification Flow\n1. Admin navigates to Admin Panel ‚Üí Payment Verification\n2. Reviews pending orders with transaction IDs\n3. Verifies payment in UPI app/bank statement\n4. Clicks \"Verify\" if valid, \"Reject\" if invalid\n5. On verification:\n   - Order status changed to \"verified\"\n   - Download URL added to order\n   - Buyer can now download file\n   - Seller earns 70% commission\n6. Action logged to admin_logs\n\n## Configuration\n\n### Environment Variables (Replit Secrets)\n```\nVITE_FIREBASE_PROJECT_ID=your-project-id\nVITE_FIREBASE_APP_ID=your-app-id\nVITE_FIREBASE_API_KEY=your-api-key\nSESSION_SECRET=your-session-secret\nDISCORD_WEBHOOK_URL=optional-discord-webhook (for notifications)\n```\n\n### Marketplace Settings (hardcoded in server/config.ts)\n- UPI ID: anikashyap07@fam\n- Commission: 30% marketplace, 70% seller\n- Max thumbnail size: 5MB\n- Max product file size: 100MB\n- Allowed thumbnail types: JPEG, PNG, GIF, WebP\n\n### QR Code Asset\n- Location: `attached_assets/scan here_1760606417275.png`\n- Used in: BuyModal component\n- Shows UPI payment QR for anikashyap07@fam\n\n## Creating an Admin User\n1. Sign in with Google as a new user\n2. Go to Firebase Console ‚Üí Firestore\n3. Navigate to `users` collection\n4. Find your user document (by email)\n5. Edit the `role` field from `\"buyer\"` to `\"admin\"`\n6. Refresh the app - Admin Panel will now be accessible\n\n## Security Features\n- ‚úÖ Firebase Authentication with Google OAuth\n- ‚úÖ Role-based access control (buyer/seller/admin)\n- ‚úÖ Protected API routes with authentication middleware\n- ‚úÖ File type and size validation\n- ‚úÖ Admin action logging (audit trail)\n- ‚úÖ Secure file storage with Firebase\n- ‚ö†Ô∏è Placeholder virus scan hook (implement in production)\n\n## Development Workflow\n1. Run `npm run dev` to start Express + Vite dev server\n2. Backend runs on port 5000\n3. Frontend served by Vite, proxied through Express\n4. Hot reload enabled for both frontend and backend\n\n## Firebase Setup Required\n1. Create Firebase project\n2. Enable Google Sign-in in Authentication\n3. Create Firestore database\n4. Enable Firebase Storage\n5. Add Replit domain to Authorized Domains\n6. Copy config values to Replit Secrets\n\n## Known Limitations & Future Enhancements\n- Manual payout system (admin pays sellers via UPI offline)\n- No automatic virus scanning (placeholder hook provided)\n- No email notifications (Discord webhook placeholder provided)\n- No seller analytics dashboard (can be added)\n- No buyer order history page (can be added)\n- No product search/filtering beyond category tags\n\n## Recent Changes (October 2025)\n- **Configuration Management Overhaul**: All sensitive data now properly managed via environment variables\n  - Removed hardcoded UPI ID, now configurable via `MARKETPLACE_UPI_ID`\n  - Added comprehensive `.env.example` with detailed setup instructions\n  - Implemented startup validation that fails if required config is missing\n  - Added secure marketplace config API endpoint (`/api/config/marketplace`)\n- **Security Enhancements**:\n  - Firebase Admin SDK now supports service account credentials with path traversal protection\n  - Marketplace config endpoint requires authentication\n  - BuyModal properly validates and handles config loading errors\n  - No sensitive data exposed in API responses\n- **Developer Experience**:\n  - Updated README with step-by-step setup guide\n  - All configuration options documented in `.env.example`\n  - Clear error messages for missing configuration\n  - Commission rates now dynamically fetched from backend\n\n## Previous Changes\n- Implemented complete authentication flow with Firebase\n- Built all frontend pages with responsive design and dark mode\n- Created comprehensive admin panel with audit logging\n- Implemented file upload to Firebase Storage\n- Added commission calculation (70/30 split)\n- Fixed React Query authentication to include Firebase ID tokens\n- All API routes protected with proper authentication middleware\n\n## Testing Checklist\n- [ ] Google Sign-in creates user\n- [ ] Seller can upload products\n- [ ] Admin can approve/reject products\n- [ ] Approved products show in marketplace\n- [ ] Buyer can initiate purchase\n- [ ] Admin can verify payments\n- [ ] Verified orders provide download access\n- [ ] Commission calculations are correct\n- [ ] Admin actions are logged\n- [ ] Role-based access works correctly\n- [ ] Dark mode toggles properly\n- [ ] Responsive design works on mobile\n","size_bytes":11310},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/Profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Package, DollarSign, Clock, CheckCircle, XCircle, Download } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport type { Product, Order } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { UploadModal } from \"@/components/UploadModal\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const [uploadOpen, setUploadOpen] = useState(false);\n\n  const { data: myProducts, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products/my\"],\n  });\n\n  const { data: myOrders, isLoading: ordersLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders/my\"],\n  });\n\n  const approvedProducts = myProducts?.filter(p => p.status === \"approved\").length || 0;\n  const pendingProducts = myProducts?.filter(p => p.status === \"pending\").length || 0;\n  const totalEarnings = myOrders\n    ?.filter(o => o.status === \"verified\")\n    .reduce((sum, o) => sum + o.sellerEarnings, 0) || 0;\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <Badge className=\"bg-chart-3 text-white\"><CheckCircle className=\"h-3 w-3 mr-1\" />Approved</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-chart-5 text-white\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-8\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <h1 className=\"text-3xl md:text-4xl font-bold\" data-testid=\"text-page-title\">\n          Seller Dashboard\n        </h1>\n        <Button onClick={() => setUploadOpen(true)} data-testid=\"button-upload\">\n          <Package className=\"h-4 w-4 mr-2\" />\n          Upload Product\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-products\">\n              {myProducts?.length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {approvedProducts} approved, {pendingProducts} pending\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Approval</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-pending-products\">\n              {pendingProducts}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Awaiting admin review\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Earnings</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-chart-3\" data-testid=\"text-total-earnings\">\n              ‚Çπ{totalEarnings.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              70% of sales (verified orders)\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"products\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"products\" data-testid=\"tab-products\">My Products</TabsTrigger>\n          <TabsTrigger value=\"earnings\" data-testid=\"tab-earnings\">Earnings</TabsTrigger>\n          <TabsTrigger value=\"payouts\" data-testid=\"tab-payouts\">Payouts</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"products\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Product Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {productsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => <Skeleton key={i} className=\"h-16 w-full\" />)}\n                </div>\n              ) : myProducts && myProducts.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Title</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Uploaded</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {myProducts.map((product) => (\n                      <TableRow key={product.id} data-testid={`row-product-${product.id}`}>\n                        <TableCell className=\"font-medium\">{product.title}</TableCell>\n                        <TableCell>‚Çπ{product.price}</TableCell>\n                        <TableCell>{getStatusBadge(product.status)}</TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {new Date(product.createdAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${product.id}`}>\n                            View\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No products uploaded yet</p>\n                  <Button onClick={() => setUploadOpen(true)} className=\"mt-4\" data-testid=\"button-upload-empty\">\n                    Upload Your First Product\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"earnings\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Earnings History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => <Skeleton key={i} className=\"h-16 w-full\" />)}\n                </div>\n              ) : myOrders && myOrders.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Product</TableHead>\n                      <TableHead>Buyer</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Your Earnings (70%)</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Date</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {myOrders.map((order) => (\n                      <TableRow key={order.id}>\n                        <TableCell className=\"font-medium\">{order.productTitle}</TableCell>\n                        <TableCell>{order.buyerName}</TableCell>\n                        <TableCell>‚Çπ{order.amount}</TableCell>\n                        <TableCell className=\"font-semibold text-chart-3\">\n                          ‚Çπ{order.sellerEarnings.toFixed(2)}\n                        </TableCell>\n                        <TableCell>\n                          {order.status === \"verified\" ? (\n                            <Badge className=\"bg-chart-3 text-white\">Verified</Badge>\n                          ) : (\n                            <Badge className=\"bg-chart-5 text-white\">Pending</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {new Date(order.createdAt).toLocaleDateString()}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <DollarSign className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No earnings yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payouts\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Payout History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-muted/50 rounded-lg p-6 text-center\">\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Payouts are processed manually by the admin via UPI\n                </p>\n                <div className=\"space-y-2\">\n                  <p className=\"text-2xl font-bold text-chart-3\">‚Çπ{totalEarnings.toFixed(2)}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total verified earnings</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <UploadModal open={uploadOpen} onClose={() => setUploadOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":10514},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/BuyModal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Product } from \"@shared/schema\";\nimport qrImage from \"@assets/scan here_1760606417275.png\";\n\ninterface MarketplaceConfig {\n  upiId: string;\n  qrImagePath: string;\n  commissionRate: number;\n  sellerRate: number;\n}\n\ninterface BuyModalProps {\n  product: Product | null;\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function BuyModal({ product, open, onClose }: BuyModalProps) {\n  const { user, firebaseUser } = useAuth();\n  const { toast } = useToast();\n  const [processing, setProcessing] = useState(false);\n  const [transactionId, setTransactionId] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n\n  const { data: marketplaceConfig, isLoading: configLoading, error: configError } = useQuery<MarketplaceConfig>({\n    queryKey: [\"/api/config/marketplace\"],\n    enabled: open,\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!product || !user || !firebaseUser) return;\n\n    // Ensure marketplace config is loaded before proceeding\n    if (!marketplaceConfig) {\n      toast({\n        title: \"Configuration error\",\n        description: \"Unable to load marketplace settings. Please try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setProcessing(true);\n\n    try {\n      const token = await firebaseUser.getIdToken();\n      \n      await fetch(\"/api/orders\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          productId: product.id,\n          productTitle: product.title,\n          buyerId: user.id,\n          buyerName: user.displayName,\n          buyerEmail: user.email,\n          sellerId: product.sellerId,\n          transactionId,\n          amount: Number(amount),\n          sellerEarnings: Number(amount) * marketplaceConfig.sellerRate,\n          marketplaceCommission: Number(amount) * marketplaceConfig.commissionRate,\n        }),\n      });\n\n      toast({\n        title: \"Payment submitted!\",\n        description: \"Your payment is pending admin verification. You'll get download access once verified.\",\n      });\n\n      setTransactionId(\"\");\n      setAmount(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Submission failed\",\n        description: \"Please try again later\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  if (!product) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl\" data-testid=\"modal-buy\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-semibold\">Complete Purchase</DialogTitle>\n          <DialogDescription>\n            Scan the QR code to pay via UPI, then enter your transaction details below\n          </DialogDescription>\n        </DialogHeader>\n\n        {configError && (\n          <div className=\"bg-destructive/10 text-destructive p-4 rounded-lg\">\n            <p className=\"font-semibold\">Configuration Error</p>\n            <p className=\"text-sm\">Unable to load payment settings. Please try again or contact support.</p>\n          </div>\n        )}\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* QR Code Section */}\n          <div className=\"flex flex-col items-center justify-center space-y-4\">\n            <div className=\"bg-white p-4 rounded-xl border-4 border-primary\">\n              <img \n                src={qrImage} \n                alt=\"UPI QR Code\" \n                className=\"w-64 h-64 md:w-72 md:h-72\"\n                data-testid=\"img-qr-code\"\n              />\n            </div>\n            <div className=\"text-center space-y-1\">\n              <p className=\"text-sm text-muted-foreground\">UPI ID</p>\n              {configLoading ? (\n                <div className=\"h-6 w-48 mx-auto bg-muted animate-pulse rounded\" />\n              ) : (\n                <p className=\"font-mono font-semibold\" data-testid=\"text-upi-id\">\n                  {marketplaceConfig?.upiId || \"Loading...\"}\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Payment Details Section */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">Product</p>\n              <p className=\"font-semibold text-lg\" data-testid=\"text-product-title\">{product.title}</p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">Amount to Pay</p>\n              <p className=\"text-3xl font-bold text-primary\" data-testid=\"text-product-price\">\n                ‚Çπ{product.price}\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"transaction-id\" className=\"text-base\">Transaction ID / UTR *</Label>\n              <Input\n                id=\"transaction-id\"\n                value={transactionId}\n                onChange={(e) => setTransactionId(e.target.value)}\n                placeholder=\"Enter 12-digit UTR number\"\n                className=\"font-mono\"\n                required\n                minLength={12}\n                maxLength={12}\n                data-testid=\"input-transaction-id\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Find this in your UPI app after payment\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\" className=\"text-base\">Amount Paid (‚Çπ) *</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                placeholder={`Enter ${product.price}`}\n                required\n                min={product.price}\n                max={product.price}\n                data-testid=\"input-amount\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Must match the product price exactly\n              </p>\n            </div>\n\n            <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n              <p className=\"text-sm font-medium\">Instructions:</p>\n              <ol className=\"text-sm text-muted-foreground space-y-1 list-decimal list-inside\">\n                <li>Scan the QR code using any UPI app</li>\n                <li>Pay exactly ‚Çπ{product.price}</li>\n                <li>Copy the 12-digit transaction ID (UTR)</li>\n                <li>Enter the details above and submit</li>\n                <li>Admin will verify and grant download access</li>\n              </ol>\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button \n                type=\"submit\" \n                disabled={processing || configLoading || !marketplaceConfig || !!configError} \n                className=\"flex-1\" \n                data-testid=\"button-submit-payment\"\n              >\n                {processing ? \"Processing...\" : configLoading ? \"Loading...\" : \"Submit Payment\"}\n              </Button>\n              <Button type=\"button\" variant=\"outline\" onClick={onClose} disabled={processing} data-testid=\"button-cancel-buy\">\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7957},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/UploadModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, X, FileText, AlertCircle } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ninterface UploadModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function UploadModal({ open, onClose }: UploadModalProps) {\n  const { user, firebaseUser } = useAuth();\n  const { toast } = useToast();\n  const [uploading, setUploading] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    price: \"\",\n    tags: [] as string[],\n    tagInput: \"\",\n  });\n  \n  const [thumbnail, setThumbnail] = useState<File | null>(null);\n  const [productFile, setProductFile] = useState<File | null>(null);\n  const [thumbnailPreview, setThumbnailPreview] = useState<string>(\"\");\n\n  const handleThumbnailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (!file.type.startsWith(\"image/\")) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload an image file for the thumbnail\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Thumbnail must be less than 5MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setThumbnail(file);\n      setThumbnailPreview(URL.createObjectURL(file));\n    }\n  };\n\n  const handleProductFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 100 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Product file must be less than 100MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setProductFile(file);\n    }\n  };\n\n  const addTag = () => {\n    const tag = formData.tagInput.trim();\n    if (tag && !formData.tags.includes(tag)) {\n      setFormData({ ...formData, tags: [...formData.tags, tag], tagInput: \"\" });\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData({ ...formData, tags: formData.tags.filter(t => t !== tagToRemove) });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!thumbnail || !productFile) {\n      toast({\n        title: \"Missing files\",\n        description: \"Please upload both thumbnail and product file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const token = await firebaseUser?.getIdToken();\n      const uploadFormData = new FormData();\n      uploadFormData.append(\"title\", formData.title);\n      uploadFormData.append(\"description\", formData.description);\n      uploadFormData.append(\"price\", formData.price);\n      uploadFormData.append(\"tags\", JSON.stringify(formData.tags));\n      uploadFormData.append(\"thumbnail\", thumbnail);\n      uploadFormData.append(\"file\", productFile);\n\n      const response = await fetch(\"/api/products\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        body: uploadFormData,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Upload failed\");\n      }\n\n      toast({\n        title: \"Product uploaded!\",\n        description: \"Your product is pending admin approval\",\n      });\n\n      // Reset form\n      setFormData({ title: \"\", description: \"\", price: \"\", tags: [], tagInput: \"\" });\n      setThumbnail(null);\n      setProductFile(null);\n      setThumbnailPreview(\"\");\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Please try again later\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-upload\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-semibold\">Upload Product</DialogTitle>\n          <DialogDescription>\n            Share your digital product with the marketplace. Admin approval required.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Alert className=\"bg-muted/50 border-primary/20\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-sm\">\n            By uploading, you consent that administrators may access your files for verification purposes.\n          </AlertDescription>\n        </Alert>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Product Title *</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n              placeholder=\"Enter product title\"\n              required\n              data-testid=\"input-product-title\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description *</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              placeholder=\"Describe your product...\"\n              className=\"min-h-32\"\n              required\n              data-testid=\"input-product-description\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"price\">Price (‚Çπ) *</Label>\n            <Input\n              id=\"price\"\n              type=\"number\"\n              min=\"1\"\n              step=\"1\"\n              value={formData.price}\n              onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n              placeholder=\"Enter price in rupees\"\n              required\n              data-testid=\"input-product-price\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              You'll receive 70% (‚Çπ{formData.price ? Math.floor(Number(formData.price) * 0.7) : 0}). Marketplace fee: 30%\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"tags\">Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"tags\"\n                value={formData.tagInput}\n                onChange={(e) => setFormData({ ...formData, tagInput: e.target.value })}\n                onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTag())}\n                placeholder=\"Add tags (press Enter)\"\n                data-testid=\"input-product-tag\"\n              />\n              <Button type=\"button\" onClick={addTag} variant=\"outline\" data-testid=\"button-add-tag\">\n                Add\n              </Button>\n            </div>\n            {formData.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {formData.tags.map((tag) => (\n                  <Badge key={tag} variant=\"secondary\" className=\"gap-1\" data-testid={`badge-tag-${tag}`}>\n                    {tag}\n                    <X className=\"h-3 w-3 cursor-pointer\" onClick={() => removeTag(tag)} />\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"thumbnail\">Thumbnail Image *</Label>\n            <div className=\"border-2 border-dashed rounded-lg p-6 text-center hover-elevate transition-colors\">\n              <input\n                id=\"thumbnail\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleThumbnailChange}\n                className=\"hidden\"\n                data-testid=\"input-thumbnail\"\n              />\n              <label htmlFor=\"thumbnail\" className=\"cursor-pointer\">\n                {thumbnailPreview ? (\n                  <img src={thumbnailPreview} alt=\"Preview\" className=\"max-h-48 mx-auto rounded-lg\" />\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Upload className=\"h-12 w-12 mx-auto text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground\">Click to upload thumbnail (max 5MB)</p>\n                  </div>\n                )}\n              </label>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"file\">Product File *</Label>\n            <div className=\"border-2 border-dashed rounded-lg p-6 text-center hover-elevate transition-colors\">\n              <input\n                id=\"file\"\n                type=\"file\"\n                onChange={handleProductFileChange}\n                className=\"hidden\"\n                data-testid=\"input-product-file\"\n              />\n              <label htmlFor=\"file\" className=\"cursor-pointer\">\n                {productFile ? (\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <FileText className=\"h-8 w-8 text-primary\" />\n                    <div className=\"text-left\">\n                      <p className=\"text-sm font-medium\">{productFile.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {(productFile.size / 1024 / 1024).toFixed(2)} MB\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Upload className=\"h-12 w-12 mx-auto text-muted-foreground\" />\n                    <p className=\"text-sm text-muted-foreground\">Click to upload product file (max 100MB)</p>\n                  </div>\n                )}\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button type=\"submit\" disabled={uploading} className=\"flex-1\" data-testid=\"button-submit-product\">\n              {uploading ? \"Uploading...\" : \"Upload Product\"}\n            </Button>\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} disabled={uploading} data-testid=\"button-cancel-upload\">\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10864},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/Admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { CheckCircle, XCircle, Download, Clock, Shield, FileText } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product, Order, AdminLog } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Redirect } from \"wouter\";\n\nexport default function Admin() {\n  const { user, firebaseUser } = useAuth();\n  const { toast } = useToast();\n\n  const { data: pendingProducts, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/admin/products/pending\"],\n  });\n\n  const { data: pendingPayments, isLoading: paymentsLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/admin/orders/pending\"],\n  });\n\n  const { data: auditLogs, isLoading: logsLoading } = useQuery<AdminLog[]>({\n    queryKey: [\"/api/admin/logs\"],\n  });\n\n  const approveProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const token = await firebaseUser?.getIdToken();\n      const response = await fetch(`/api/admin/products/${productId}/approve`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to approve product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/logs\"] });\n      toast({ title: \"Product approved\", description: \"Product is now visible in the marketplace\" });\n    },\n  });\n\n  const rejectProductMutation = useMutation({\n    mutationFn: async ({ productId, reason }: { productId: string; reason: string }) => {\n      const token = await firebaseUser?.getIdToken();\n      const response = await fetch(`/api/admin/products/${productId}/reject`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ reason }),\n      });\n      if (!response.ok) throw new Error(\"Failed to reject product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/logs\"] });\n      toast({ title: \"Product rejected\", description: \"Seller has been notified\" });\n    },\n  });\n\n  const verifyPaymentMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const token = await firebaseUser?.getIdToken();\n      const response = await fetch(`/api/admin/orders/${orderId}/verify`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to verify payment\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/logs\"] });\n      toast({ title: \"Payment verified\", description: \"Buyer can now download the product\" });\n    },\n  });\n\n  const rejectPaymentMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const token = await firebaseUser?.getIdToken();\n      const response = await fetch(`/api/admin/orders/${orderId}/reject`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to reject payment\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/logs\"] });\n      toast({ title: \"Payment rejected\", variant: \"destructive\" });\n    },\n  });\n\n  const downloadFileMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const token = await firebaseUser?.getIdToken();\n      const response = await fetch(`/api/admin/products/${productId}/download`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to get download URL\");\n      return response.json() as Promise<{ downloadURL: string }>;\n    },\n    onSuccess: (data) => {\n      window.open(data.downloadURL, \"_blank\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/logs\"] });\n    },\n  });\n\n  // Redirect if not admin\n  if (!user || user.role !== \"admin\") {\n    return <Redirect to=\"/\" />;\n  }\n\n  const getActionBadge = (action: string) => {\n    switch (action) {\n      case \"approve_product\":\n        return <Badge className=\"bg-chart-3 text-white\">Approved Product</Badge>;\n      case \"reject_product\":\n        return <Badge variant=\"destructive\">Rejected Product</Badge>;\n      case \"verify_payment\":\n        return <Badge className=\"bg-chart-3 text-white\">Verified Payment</Badge>;\n      case \"reject_payment\":\n        return <Badge variant=\"destructive\">Rejected Payment</Badge>;\n      case \"download_file\":\n        return <Badge variant=\"outline\">Downloaded File</Badge>;\n      default:\n        return <Badge>{action}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-8\">\n      <div className=\"flex items-center gap-3 mb-8\">\n        <Shield className=\"h-8 w-8 text-primary\" />\n        <h1 className=\"text-3xl md:text-4xl font-bold\" data-testid=\"text-page-title\">\n          Admin Panel\n        </h1>\n      </div>\n\n      <Tabs defaultValue=\"products\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"products\" data-testid=\"tab-products\">\n            Pending Approvals\n            {pendingProducts && pendingProducts.length > 0 && (\n              <Badge className=\"ml-2\" variant=\"secondary\">{pendingProducts.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"payments\" data-testid=\"tab-payments\">\n            Payment Verification\n            {pendingPayments && pendingPayments.length > 0 && (\n              <Badge className=\"ml-2\" variant=\"secondary\">{pendingPayments.length}</Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"audit\" data-testid=\"tab-audit\">Audit Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"products\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Product Approvals</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {productsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => <Skeleton key={i} className=\"h-20 w-full\" />)}\n                </div>\n              ) : pendingProducts && pendingProducts.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Product</TableHead>\n                      <TableHead>Seller</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Uploaded</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {pendingProducts.map((product) => (\n                      <TableRow key={product.id} data-testid={`row-product-${product.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-3\">\n                            <img\n                              src={product.thumbnailURL}\n                              alt={product.title}\n                              className=\"w-12 h-12 rounded object-cover\"\n                            />\n                            <div>\n                              <p className=\"font-medium\">{product.title}</p>\n                              <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                                {product.description}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage src={product.sellerPhotoURL} />\n                              <AvatarFallback className=\"text-xs\">\n                                {product.sellerName.charAt(0)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"text-sm\">{product.sellerName}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-semibold\">‚Çπ{product.price}</TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {new Date(product.createdAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex gap-2 justify-end\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => downloadFileMutation.mutate(product.id)}\n                              data-testid={`button-download-${product.id}`}\n                            >\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => approveProductMutation.mutate(product.id)}\n                              disabled={approveProductMutation.isPending}\n                              data-testid={`button-approve-${product.id}`}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Approve\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => rejectProductMutation.mutate({ \n                                productId: product.id, \n                                reason: \"Does not meet marketplace standards\" \n                              })}\n                              disabled={rejectProductMutation.isPending}\n                              data-testid={`button-reject-${product.id}`}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Reject\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No pending product approvals</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payments\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Verification</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {paymentsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => <Skeleton key={i} className=\"h-20 w-full\" />)}\n                </div>\n              ) : pendingPayments && pendingPayments.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Product</TableHead>\n                      <TableHead>Buyer</TableHead>\n                      <TableHead>Transaction ID</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {pendingPayments.map((order) => (\n                      <TableRow key={order.id} data-testid={`row-order-${order.id}`}>\n                        <TableCell className=\"font-medium\">{order.productTitle}</TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"text-sm\">{order.buyerName}</p>\n                            <p className=\"text-xs text-muted-foreground\">{order.buyerEmail}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <code className=\"text-sm font-mono bg-muted px-2 py-1 rounded\">\n                            {order.transactionId}\n                          </code>\n                        </TableCell>\n                        <TableCell className=\"font-semibold\">‚Çπ{order.amount}</TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {new Date(order.createdAt).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex gap-2 justify-end\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => verifyPaymentMutation.mutate(order.id)}\n                              disabled={verifyPaymentMutation.isPending}\n                              data-testid={`button-verify-${order.id}`}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Verify\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => rejectPaymentMutation.mutate(order.id)}\n                              disabled={rejectPaymentMutation.isPending}\n                              data-testid={`button-reject-payment-${order.id}`}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Reject\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Clock className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No pending payment verifications</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"audit\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Admin Action Logs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {logsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => <Skeleton key={i} className=\"h-16 w-full\" />)}\n                </div>\n              ) : auditLogs && auditLogs.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {auditLogs.map((log) => (\n                    <div\n                      key={log.id}\n                      className=\"flex items-start gap-4 p-4 rounded-lg border hover-elevate transition-colors\"\n                      data-testid={`log-${log.id}`}\n                    >\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                          {log.adminName.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <span className=\"font-medium\">{log.adminName}</span>\n                          {getActionBadge(log.action)}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{log.details}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {new Date(log.createdAt).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No admin actions logged yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":17877},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport { ThemeProvider, useTheme } from \"@/components/ThemeProvider\";\nimport { FloatingUploadButton } from \"@/components/FloatingUploadButton\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nimport Home from \"@/pages/Home\";\nimport ProductDetail from \"@/pages/ProductDetail\";\nimport Profile from \"@/pages/Profile\";\nimport Settings from \"@/pages/Settings\";\nimport Admin from \"@/pages/Admin\";\nimport Login from \"@/pages/Login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/product/:id\" component={ProductDetail} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <ThemeProvider>\n            <SidebarProvider style={style as React.CSSProperties}>\n              <div className=\"flex h-screen w-full\">\n                <AppSidebar />\n                <div className=\"flex flex-col flex-1 overflow-hidden\">\n                  <header className=\"flex items-center justify-between p-4 border-b sticky top-0 bg-background z-40\">\n                    <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                    <ThemeToggle />\n                  </header>\n                  <main className=\"flex-1 overflow-y-auto\">\n                    <Router />\n                  </main>\n                </div>\n              </div>\n              <FloatingUploadButton />\n              <Toaster />\n            </SidebarProvider>\n          </ThemeProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3090},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ShoppingBag, Search, Package, Shield, CreditCard } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { BuyModal } from \"@/components/BuyModal\";\nimport type { Product } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nconst categories = [\"All\", \"Documents\", \"Media\", \"Code\", \"Design\", \"Templates\"];\n\nexport default function Home() {\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [buyModalOpen, setBuyModalOpen] = useState(false);\n\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", \"approved\"],\n  });\n\n  const filteredProducts = products?.filter((product) => {\n    const matchesSearch = product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"All\" || product.tags.includes(selectedCategory);\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleBuy = (product: Product) => {\n    setSelectedProduct(product);\n    setBuyModalOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <div className=\"relative bg-gradient-to-br from-primary/10 via-background to-chart-2/10 py-16 md:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <div className=\"text-center space-y-6 mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold\" data-testid=\"text-page-title\">\n              Senpai Network Marketplace\n            </h1>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Buy and sell digital products securely with UPI payments and admin verification\n            </p>\n          </div>\n\n          {/* Feature Cards */}\n          <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n            <Card className=\"text-center hover-elevate transition-all\">\n              <CardHeader>\n                <Package className=\"h-12 w-12 mx-auto text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <h3 className=\"font-semibold text-lg mb-2\">List Products</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Upload and sell your digital creations\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover-elevate transition-all\">\n              <CardHeader>\n                <CreditCard className=\"h-12 w-12 mx-auto text-chart-2\" />\n              </CardHeader>\n              <CardContent>\n                <h3 className=\"font-semibold text-lg mb-2\">Secure Payments</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Pay safely via UPI with QR codes\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center hover-elevate transition-all\">\n              <CardHeader>\n                <Shield className=\"h-12 w-12 mx-auto text-chart-3\" />\n              </CardHeader>\n              <CardContent>\n                <h3 className=\"font-semibold text-lg mb-2\">Admin Verified</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  All products reviewed before listing\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Products Section */}\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-12\">\n        {/* Search and Filters */}\n        <div className=\"space-y-6 mb-8\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search products...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search\"\n            />\n          </div>\n\n          <div className=\"flex gap-2 flex-wrap\">\n            {categories.map((category) => (\n              <Badge\n                key={category}\n                variant={selectedCategory === category ? \"default\" : \"outline\"}\n                className=\"cursor-pointer hover-elevate transition-all\"\n                onClick={() => setSelectedCategory(category)}\n                data-testid={`badge-category-${category.toLowerCase()}`}\n              >\n                {category}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i}>\n                <Skeleton className=\"h-48 w-full\" />\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-4 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredProducts && filteredProducts.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredProducts.map((product) => (\n              <Card\n                key={product.id}\n                className=\"overflow-hidden hover-elevate transition-all hover:shadow-md group\"\n                data-testid={`card-product-${product.id}`}\n              >\n                <Link href={`/product/${product.id}`}>\n                  <div className=\"aspect-video relative overflow-hidden bg-muted\">\n                    <img\n                      src={product.thumbnailURL}\n                      alt={product.title}\n                      className=\"object-cover w-full h-full group-hover:scale-105 transition-transform\"\n                    />\n                    <Badge className=\"absolute top-2 right-2 bg-chart-3 text-white\">\n                      Approved\n                    </Badge>\n                  </div>\n                </Link>\n                <CardHeader className=\"space-y-2\">\n                  <h3 className=\"font-semibold text-lg line-clamp-1\" data-testid={`text-title-${product.id}`}>\n                    {product.title}\n                  </h3>\n                  <p className=\"text-2xl font-bold text-primary\" data-testid={`text-price-${product.id}`}>\n                    ‚Çπ{product.price}\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                    {product.description}\n                  </p>\n                  <div className=\"flex gap-2 mt-3 flex-wrap\">\n                    {product.tags.slice(0, 3).map((tag) => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n                <CardFooter className=\"gap-2\">\n                  <Button\n                    className=\"flex-1\"\n                    onClick={() => handleBuy(product)}\n                    data-testid={`button-buy-${product.id}`}\n                  >\n                    Buy Now\n                  </Button>\n                  <Link href={`/product/${product.id}`}>\n                    <Button variant=\"outline\" data-testid={`button-view-${product.id}`}>\n                      View\n                    </Button>\n                  </Link>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <ShoppingBag className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No products found</h3>\n            <p className=\"text-muted-foreground\">\n              {searchQuery ? \"Try a different search term\" : \"Be the first to upload a product!\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      <BuyModal\n        product={selectedProduct}\n        open={buyModalOpen}\n        onClose={() => setBuyModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":8734},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/pages/ProductDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ChevronRight, Home, Download, Shield } from \"lucide-react\";\nimport { BuyModal } from \"@/components/BuyModal\";\nimport type { Product } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function ProductDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [buyModalOpen, setBuyModalOpen] = useState(false);\n\n  const { data: product, isLoading } = useQuery<Product>({\n    queryKey: [\"/api/products\", id],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-8\">\n        <Skeleton className=\"h-8 w-64 mb-8\" />\n        <div className=\"grid lg:grid-cols-5 gap-8\">\n          <div className=\"lg:col-span-3\">\n            <Skeleton className=\"aspect-video w-full rounded-lg\" />\n          </div>\n          <div className=\"lg:col-span-2 space-y-4\">\n            <Skeleton className=\"h-12 w-3/4\" />\n            <Skeleton className=\"h-8 w-1/3\" />\n            <Skeleton className=\"h-24 w-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-16 text-center\">\n        <h2 className=\"text-2xl font-semibold mb-4\">Product not found</h2>\n        <Link href=\"/\">\n          <Button>Back to Home</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-8\">\n      {/* Breadcrumb */}\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-8\">\n        <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-home\">\n          <Home className=\"h-4 w-4\" />\n        </Link>\n        <ChevronRight className=\"h-4 w-4\" />\n        <span className=\"text-foreground font-medium\" data-testid=\"text-product-breadcrumb\">\n          {product.title}\n        </span>\n      </div>\n\n      <div className=\"grid lg:grid-cols-5 gap-8\">\n        {/* Product Image */}\n        <div className=\"lg:col-span-3\">\n          <div className=\"relative rounded-lg overflow-hidden bg-muted aspect-video\">\n            <img\n              src={product.thumbnailURL}\n              alt={product.title}\n              className=\"object-cover w-full h-full\"\n              data-testid=\"img-product-main\"\n            />\n            <Badge className=\"absolute top-4 right-4 bg-chart-3 text-white\">\n              <Shield className=\"h-3 w-3 mr-1\" />\n              Admin Verified\n            </Badge>\n          </div>\n\n          {/* Product Description */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <h3 className=\"text-xl font-semibold\">Description</h3>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground whitespace-pre-wrap\" data-testid=\"text-product-description\">\n                {product.description}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Product Details */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <div>\n            <h1 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-product-title\">\n              {product.title}\n            </h1>\n            <p className=\"text-4xl font-bold text-primary mb-6\" data-testid=\"text-product-price\">\n              ‚Çπ{product.price}\n            </p>\n\n            {/* Tags */}\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              {product.tags.map((tag) => (\n                <Badge key={tag} variant=\"secondary\" data-testid={`badge-tag-${tag}`}>\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n\n            {/* Buy Button */}\n            <Button\n              size=\"lg\"\n              className=\"w-full\"\n              onClick={() => setBuyModalOpen(true)}\n              data-testid=\"button-buy-now\"\n            >\n              <Download className=\"h-5 w-5 mr-2\" />\n              Buy Now\n            </Button>\n          </div>\n\n          <Separator />\n\n          {/* Product Info */}\n          <Card>\n            <CardHeader>\n              <h3 className=\"font-semibold\">Product Information</h3>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">File Size</span>\n                <span className=\"font-medium\">\n                  {(product.fileSize / 1024 / 1024).toFixed(2)} MB\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">File Name</span>\n                <span className=\"font-medium font-mono text-xs truncate max-w-[200px]\">\n                  {product.fileName}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Listed</span>\n                <span className=\"font-medium\">\n                  {new Date(product.createdAt).toLocaleDateString()}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Seller Info */}\n          <Card>\n            <CardHeader>\n              <h3 className=\"font-semibold\">Seller</h3>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-3\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={product.sellerPhotoURL} alt={product.sellerName} />\n                  <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                    {product.sellerName.charAt(0).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"font-medium\" data-testid=\"text-seller-name\">{product.sellerName}</p>\n                  <p className=\"text-sm text-muted-foreground\">Verified Seller</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Commission Info */}\n          <Card className=\"bg-muted/50\">\n            <CardContent className=\"pt-6\">\n              <p className=\"text-sm text-muted-foreground mb-2\">Earnings Distribution</p>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Seller receives (70%)</span>\n                  <span className=\"font-semibold\">‚Çπ{Math.floor(product.price * 0.7)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Marketplace fee (30%)</span>\n                  <span className=\"font-semibold\">‚Çπ{Math.floor(product.price * 0.3)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <BuyModal\n        product={product}\n        open={buyModalOpen}\n        onClose={() => setBuyModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":7367},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/lib/firebase.ts":{"content":"// Firebase configuration and initialization\n// Reference: firebase_barebones_javascript blueprint\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n\n// Initialize services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\nexport const googleProvider = new GoogleAuthProvider();\n","size_bytes":910},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { User, Bell, Shield, LogOut, Moon, Sun } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Settings() {\n  const { user, logout } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const [notifications, setNotifications] = useState({\n    productApproval: true,\n    paymentVerified: true,\n    newOrders: true,\n  });\n\n  const handleLogout = async () => {\n    await logout();\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out\",\n    });\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 md:px-6 lg:px-8 py-8\">\n      <h1 className=\"text-3xl md:text-4xl font-bold mb-8\" data-testid=\"text-page-title\">\n        Settings\n      </h1>\n\n      <div className=\"space-y-6\">\n        {/* Account Section */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              <CardTitle>Account</CardTitle>\n            </div>\n            <CardDescription>Your profile and account information</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"h-20 w-20\">\n                <AvatarImage src={user?.photoURL} alt={user?.displayName} />\n                <AvatarFallback className=\"bg-primary text-primary-foreground text-2xl\">\n                  {user?.displayName?.charAt(0).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-semibold\" data-testid=\"text-user-name\">\n                  {user?.displayName}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-user-email\">\n                  {user?.email}\n                </p>\n                <Badge className=\"mt-2\" variant=\"outline\" data-testid=\"badge-user-role\">\n                  {user?.role}\n                </Badge>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"text-base\">Theme</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose your preferred theme\n                  </p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={toggleTheme}\n                  data-testid=\"button-theme-toggle\"\n                >\n                  {theme === \"light\" ? (\n                    <Moon className=\"h-5 w-5\" />\n                  ) : (\n                    <Sun className=\"h-5 w-5\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notifications Section */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              <CardTitle>Notifications</CardTitle>\n            </div>\n            <CardDescription>Manage your notification preferences</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"product-approval\">Product Approvals</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get notified when your products are approved or rejected\n                  </p>\n                </div>\n                <Switch\n                  id=\"product-approval\"\n                  checked={notifications.productApproval}\n                  onCheckedChange={(checked) =>\n                    setNotifications({ ...notifications, productApproval: checked })\n                  }\n                  data-testid=\"switch-product-approval\"\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"payment-verified\">Payment Verified</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get notified when payments are verified for your products\n                  </p>\n                </div>\n                <Switch\n                  id=\"payment-verified\"\n                  checked={notifications.paymentVerified}\n                  onCheckedChange={(checked) =>\n                    setNotifications({ ...notifications, paymentVerified: checked })\n                  }\n                  data-testid=\"switch-payment-verified\"\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"new-orders\">New Orders</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get notified when someone purchases your product\n                  </p>\n                </div>\n                <Switch\n                  id=\"new-orders\"\n                  checked={notifications.newOrders}\n                  onCheckedChange={(checked) =>\n                    setNotifications({ ...notifications, newOrders: checked })\n                  }\n                  data-testid=\"switch-new-orders\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Section */}\n        {user?.role === \"admin\" && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                <CardTitle>Role Management</CardTitle>\n              </div>\n              <CardDescription>Admin-only settings</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-primary/10 rounded-lg p-4 border border-primary/20\">\n                <p className=\"text-sm font-medium mb-2\">Administrator Access</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  You have full access to the admin panel including product approvals,\n                  payment verification, and audit logs.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Logout Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign Out</CardTitle>\n            <CardDescription>Sign out of your account</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              variant=\"destructive\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Sign Out\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7731},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 15% 15%;\n\n  --border: 220 13% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 220 13% 91%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 220 15% 15%;\n\n  --sidebar-border: 220 13% 86%;\n\n  --sidebar-primary: 245 65% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 10% 92%;\n\n  --sidebar-accent-foreground: 220 15% 15%;\n\n  --sidebar-ring: 245 65% 50%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 220 13% 90%;\n\n  --primary: 245 65% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 10% 93%;\n\n  --secondary-foreground: 220 15% 20%;\n\n  --muted: 220 8% 94%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 220 12% 95%;\n\n  --accent-foreground: 220 15% 25%;\n\n  --destructive: 4 90% 58%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 80%;\n  --ring: 245 65% 50%;\n  --chart-1: 245 65% 45%;\n  --chart-2: 200 75% 45%;\n  --chart-3: 142 72% 45%;\n  --chart-4: 280 55% 50%;\n  --chart-5: 38 92% 50%;\n\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Courier New', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 15% / 0.06), 0px 1px 2px -1px hsl(220 15% 15% / 0.10);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 15% / 0.08), 0px 2px 4px -1px hsl(220 15% 15% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 15% / 0.10), 0px 3px 6px -2px hsl(220 15% 15% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 15% / 0.12), 0px 4px 8px -2px hsl(220 15% 15% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 15% 15% / 0.15), 0px 8px 12px -4px hsl(220 15% 15% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 15% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Status colors */\n  --success: 142 72% 45%;\n  --success-foreground: 0 0% 98%;\n  --warning: 38 92% 50%;\n  --warning-foreground: 220 15% 15%;\n  --info: 210 100% 56%;\n  --info-foreground: 0 0% 98%;\n\n  /* Gradient mesh for hero */\n  --gradient-start: 245 65% 50%;\n  --gradient-end: 200 75% 45%;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 10%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 15% 22%;\n\n  --card: 220 15% 13%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 15% 18%;\n\n  --sidebar: 220 15% 11%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 15% 16%;\n\n  --sidebar-primary: 245 70% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 12% 15%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 245 70% 60%;\n\n  --popover: 220 15% 12%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 15% 17%;\n\n  --primary: 245 70% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 12% 16%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 220 10% 14%;\n\n  --muted-foreground: 220 10% 65%;\n\n  --accent: 220 14% 15%;\n\n  --accent-foreground: 0 0% 88%;\n\n  --destructive: 4 90% 58%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 30%;\n  --ring: 245 70% 60%;\n  --chart-1: 245 70% 65%;\n  --chart-2: 200 80% 60%;\n  --chart-3: 142 72% 55%;\n  --chart-4: 280 60% 65%;\n  --chart-5: 38 92% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.35);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 6px -2px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.40), 0px 4px 8px -2px hsl(0 0% 0% / 0.30);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.50), 0px 8px 12px -4px hsl(0 0% 0% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.60);\n\n  /* Status colors */\n  --success: 142 72% 55%;\n  --success-foreground: 0 0% 98%;\n  --warning: 38 92% 60%;\n  --warning-foreground: 220 15% 10%;\n  --info: 210 100% 60%;\n  --info-foreground: 0 0% 98%;\n\n  /* Gradient mesh for hero */\n  --gradient-start: 245 70% 60%;\n  --gradient-end: 200 80% 60%;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11715},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/FloatingUploadButton.tsx":{"content":"import { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useState } from \"react\";\nimport { UploadModal } from \"@/components/UploadModal\";\n\nexport function FloatingUploadButton() {\n  const { user } = useAuth();\n  const [uploadOpen, setUploadOpen] = useState(false);\n\n  // Only show for sellers and admins\n  if (!user || (user.role !== \"seller\" && user.role !== \"admin\")) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        size=\"lg\"\n        className=\"fixed bottom-6 right-6 h-16 w-16 rounded-full shadow-lg hover:shadow-xl transition-all hover:scale-105 group md:w-auto md:px-6 z-50\"\n        onClick={() => setUploadOpen(true)}\n        data-testid=\"button-upload-floating\"\n      >\n        <Plus className=\"h-6 w-6\" />\n        <span className=\"hidden md:inline md:ml-2 md:group-hover:inline\">\n          Upload Product\n        </span>\n      </Button>\n\n      <UploadModal open={uploadOpen} onClose={() => setUploadOpen(false)} />\n    </>\n  );\n}\n","size_bytes":1042},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState, type ReactNode } from \"react\";\nimport { type User as FirebaseUser } from \"firebase/auth\";\nimport { onAuthChange, signInWithGoogle, signOut } from \"@/lib/auth\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  firebaseUser: FirebaseUser | null;\n  user: User | null;\n  loading: boolean;\n  signIn: () => void;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthChange(async (firebaseUser) => {\n      setFirebaseUser(firebaseUser);\n      \n      if (firebaseUser) {\n        // Fetch user profile from backend\n        try {\n          const response = await fetch(\"/api/auth/me\", {\n            headers: {\n              Authorization: `Bearer ${await firebaseUser.getIdToken()}`,\n            },\n          });\n          \n          if (response.ok) {\n            const userData = await response.json();\n            setUser(userData);\n          }\n        } catch (error) {\n          console.error(\"Error fetching user data:\", error);\n        }\n      } else {\n        setUser(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const handleSignIn = () => {\n    signInWithGoogle();\n  };\n\n  const handleLogout = async () => {\n    await signOut();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ firebaseUser, user, loading, signIn: handleSignIn, logout: handleLogout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2013},"README.md":{"content":"# Senpai Network Marketplace\n\nA full-stack digital marketplace with Google Sign-in, UPI payment verification, and admin approval workflows. Built with React, Express, Firebase, and Tailwind CSS.\n\n## Features\n\n- üîê **Google Sign-in Authentication** - Secure authentication with Firebase\n- üí≥ **UPI Payment System** - QR code-based payment with manual verification\n- üì¶ **Product Upload & Management** - Sellers can upload digital products\n- ‚úÖ **Admin Approval Workflow** - All products require admin approval\n- üí∞ **Commission System** - Automatic 70/30 split (seller/marketplace)\n- üìä **Admin Panel** - Product approvals, payment verification, audit logs\n- üé® **Beautiful UI** - Responsive design with dark mode support\n- üîí **Role-Based Access** - Buyer, Seller, and Admin roles\n\n## Tech Stack\n\n- **Frontend**: React, TypeScript, Tailwind CSS, Shadcn UI\n- **Backend**: Express, Node.js, TypeScript\n- **Database**: Firebase Firestore\n- **Storage**: Firebase Storage\n- **Authentication**: Firebase Auth (Google Sign-in)\n\n## Getting Started\n\n### Prerequisites\n\n1. A Firebase project (free tier works perfectly)\n2. Replit account (or Node.js 20+ installed locally)\n3. 10 minutes for initial setup\n\n### Step 1: Firebase Setup\n\n1. **Create Firebase Project**\n   - Go to [Firebase Console](https://console.firebase.google.com/)\n   - Click \"Create a project\" or \"Add project\"\n   - Follow the setup wizard\n\n2. **Add Web App**\n   - In your Firebase project, click the web icon `</>`\n   - Register your app with a nickname (e.g., \"Senpai Marketplace\")\n   - Copy the config values shown\n\n3. **Enable Authentication**\n   - Go to Authentication ‚Üí Sign-in method\n   - Enable **Google** provider\n   - Click Save\n\n4. **Create Firestore Database**\n   - Go to Firestore Database\n   - Click \"Create database\"\n   - Choose **Production mode**\n   - Select your preferred location\n\n5. **Enable Storage**\n   - Go to Storage\n   - Click \"Get started\"\n   - Choose **Production mode**\n\n6. **(Optional) Service Account for Admin SDK**\n   - Go to Project Settings ‚Üí Service Accounts\n   - Click \"Generate new private key\"\n   - Download the JSON file (keep it secure!)\n\n### Step 2: Installation on Replit\n\n1. **Fork this Repl** or import from GitHub\n\n2. **Configure Environment Variables**\n   \n   Open the Secrets tab (üîí icon) and add the following:\n\n   **Required:**\n   ```\n   VITE_FIREBASE_PROJECT_ID=your-project-id\n   VITE_FIREBASE_APP_ID=1:123456:web:abc123\n   VITE_FIREBASE_API_KEY=AIzaSyXXXXXXXXXXXXXXXXXX\n   SESSION_SECRET=your-random-32-char-secret\n   MARKETPLACE_UPI_ID=anikashyap07@fam\n   ```\n\n   **Optional (Recommended):**\n   ```\n   FIREBASE_SERVICE_ACCOUNT={\"type\":\"service_account\"...}\n   DISCORD_WEBHOOK_URL=your-webhook-url\n   ```\n\n   üí° **Tip**: See `.env.example` for detailed setup instructions and all available options\n\n3. **Add Authorized Domain**\n   - Copy your Replit dev URL (e.g., `your-repl.replit.dev`)\n   - In Firebase Console ‚Üí Authentication ‚Üí Settings ‚Üí Authorized domains\n   - Add your Replit URL\n\n4. **Run the App**\n   - The app will start automatically when you run the Repl\n   - Or click the \"Run\" button\n\n5. **Create First Admin User**\n   - Sign in with Google\n   - Go to Firebase Console ‚Üí Firestore ‚Üí `users` collection\n   - Find your user document\n   - Edit the `role` field: change `\"buyer\"` to `\"admin\"`\n   - Refresh the app to see the Admin Panel\n\n### Step 3: Local Development\n\n1. **Clone the repository:**\n   ```bash\n   git clone <your-repo-url>\n   cd senpai-marketplace\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Setup environment variables:**\n   ```bash\n   cp .env.example .env\n   ```\n   Then edit `.env` and fill in your Firebase credentials\n\n4. **Start the development server:**\n   ```bash\n   npm run dev\n   ```\n\n5. **Open in browser:**\n   ```\n   http://localhost:5000\n   ```\n\n### Step 4: Add Your QR Code (Optional)\n\nTo customize the UPI QR code:\n\n1. Generate your UPI QR code or use the provided one\n2. Save it to `attached_assets/` folder\n3. Update `.env`:\n   ```\n   MARKETPLACE_QR_IMAGE_PATH=your-qr-image.png\n   ```\n\n## Configuration\n\nAll configuration is managed through environment variables. See `.env.example` for the complete list.\n\n### Core Configuration\n\n| Variable | Required | Default | Description |\n|----------|----------|---------|-------------|\n| `VITE_FIREBASE_PROJECT_ID` | ‚úÖ Yes | - | Firebase project ID |\n| `VITE_FIREBASE_APP_ID` | ‚úÖ Yes | - | Firebase app ID |\n| `VITE_FIREBASE_API_KEY` | ‚úÖ Yes | - | Firebase API key |\n| `SESSION_SECRET` | ‚úÖ Yes | - | Session encryption secret |\n| `MARKETPLACE_UPI_ID` | ‚úÖ Yes | anikashyap07@fam | UPI ID for payments |\n\n### Optional Configuration\n\n| Variable | Default | Description |\n|----------|---------|-------------|\n| `FIREBASE_SERVICE_ACCOUNT` | - | Service account credentials (JSON or path) |\n| `MARKETPLACE_QR_IMAGE_PATH` | scan here_1760606417275.png | QR code filename |\n| `MARKETPLACE_COMMISSION_RATE` | 0.3 | Marketplace commission (30%) |\n| `MARKETPLACE_SELLER_RATE` | 0.7 | Seller earnings rate (70%) |\n| `MAX_THUMBNAIL_SIZE` | 5242880 | Max thumbnail size (5MB) |\n| `MAX_FILE_SIZE` | 104857600 | Max file size (100MB) |\n| `DISCORD_WEBHOOK_URL` | - | Discord webhook for notifications |\n| `ADMIN_NOTIFICATION_EMAIL` | - | Admin email (placeholder) |\n\n### UPI Payment Setup\n\n1. The default UPI ID is `anikashyap07@fam`\n2. QR code is at `attached_assets/scan here_1760606417275.png`\n3. To customize:\n   - Add your UPI ID to `.env`: `MARKETPLACE_UPI_ID=your-upi@id`\n   - Replace the QR image in `attached_assets/`\n   - Update image path in `.env`: `MARKETPLACE_QR_IMAGE_PATH=your-qr.png`\n\n### Commission Structure\n\n- **Seller Earnings**: 70% of sale price (configurable via `MARKETPLACE_SELLER_RATE`)\n- **Marketplace Fee**: 30% of sale price (configurable via `MARKETPLACE_COMMISSION_RATE`)\n\nThese rates are calculated automatically and stored with each order.\n\n### File Upload Limits\n\nConfigure in `.env`:\n```env\nMAX_THUMBNAIL_SIZE=5242880      # 5MB\nMAX_FILE_SIZE=104857600         # 100MB\nALLOWED_FILE_TYPES=.pdf,.zip    # Comma-separated, empty = all types\n```\n\n## User Roles\n\n### Buyer (Default)\n- Browse approved products\n- Purchase products via UPI\n- View order history\n\n### Seller\n- All buyer permissions\n- Upload products (pending approval)\n- View earnings and payouts\n- Track product approval status\n\n### Admin\n- All seller permissions\n- Approve/reject products\n- Verify/reject payments\n- Download any file for verification\n- View audit logs of all admin actions\n\n## Deployment\n\nThis app is now **fully configured for deployment**! Choose your preferred platform:\n\n### ‚≠ê Option 1: Deploy on Replit (Recommended - Easiest!)\n\n1. Click the **Deploy** button in Replit\n2. Your app will be live at `https://your-repl-name.replit.app`\n3. Add this domain to Firebase Authorized Domains (see Firebase Setup below)\n4. Done! Your fullstack app is live üéâ\n\n**Pros**: Zero configuration, instant deployment, free tier available\n\n### üöÄ Option 2: Render.com (Best Free Alternative)\n\nThe app includes a `render.yaml` configuration file for one-click deployment:\n\n1. Push your code to GitHub\n2. Go to [render.com](https://render.com) and create an account\n3. Click \"New +\" ‚Üí \"Web Service\"\n4. Connect your GitHub repository\n5. Render will auto-detect the configuration\n6. Add your environment variables in Render dashboard\n7. Click \"Create Web Service\"\n\n**Pros**: Free tier, production-ready, auto-deploys from Git\n\n### üåê Option 3: Other Platforms\n\n- **Railway.app**: Similar to Render, very developer-friendly\n- **Netlify/Vercel**: Frontend only (API won't work)\n\nüìñ **See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed instructions for all platforms**\n\n### üî• Post-Deployment: Firebase Setup\n\nAfter deploying, update Firebase Authorized Domains:\n\n1. Go to [Firebase Console](https://console.firebase.google.com)\n2. Select your project ‚Üí **Authentication** ‚Üí **Settings** ‚Üí **Authorized domains**\n3. Add your deployment domain:\n   - Replit: `your-repl.replit.app`\n   - Render: `your-service.onrender.com`\n   - Custom domain: `yourdomain.com`\n\n### Custom Domain\n\n1. Add a custom domain in your deployment platform\n2. Add your custom domain to Firebase Authorized Domains\n3. Update DNS records as instructed by your platform\n\n## Security Features\n\n- ‚úÖ Firebase authentication with Google OAuth\n- ‚úÖ Role-based access control\n- ‚úÖ File type and size validation\n- ‚úÖ Admin action logging\n- ‚úÖ Secure file storage with Firebase\n- ‚ö†Ô∏è Placeholder virus scan hook (implement real scanning in production)\n\n## Admin Actions Logged\n\nAll admin actions are automatically logged to Firestore `admin_logs` collection:\n- Product approvals/rejections\n- Payment verifications/rejections\n- File downloads\n- Role changes\n\n## Payment Verification Flow\n\n1. Buyer clicks \"Buy Now\" on a product\n2. QR code modal shows with UPI payment details\n3. Buyer scans QR with any UPI app and pays\n4. Buyer enters Transaction ID (UTR) and amount\n5. Order created with `pending_verification` status\n6. Admin verifies payment in Admin Panel\n7. Upon verification, buyer gets download access\n\n## Payout System\n\nPayouts are manual and handled outside the system:\n- Admin views seller earnings in the Admin Panel\n- Admin pays sellers directly via UPI (anikashyap07@fam)\n- Admin marks payout as completed in the system\n\n## Optional Enhancements\n\nThe codebase includes placeholders for:\n- **Discord Webhooks** - Notifications for new uploads/orders\n- **Virus Scanning** - File scanning before approval (see `virusScanHook` in `server/routes.ts`)\n- **Email Notifications** - Seller/buyer notifications\n\nTo implement these, update the respective sections in the code.\n\n## Project Structure\n\n```\n‚îú‚îÄ‚îÄ client/                 # Frontend React app\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/    # Reusable components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/         # Page components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ contexts/      # React contexts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/           # Utilities and config\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hooks/         # Custom hooks\n‚îú‚îÄ‚îÄ server/                # Backend Express app\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts          # API routes\n‚îÇ   ‚îú‚îÄ‚îÄ config.ts          # Configuration\n‚îÇ   ‚îú‚îÄ‚îÄ firebase-admin.ts  # Firebase Admin SDK\n‚îÇ   ‚îî‚îÄ‚îÄ middleware/        # Auth middleware\n‚îú‚îÄ‚îÄ shared/                # Shared types and schemas\n‚îÇ   ‚îî‚îÄ‚îÄ schema.ts          # Zod schemas\n‚îî‚îÄ‚îÄ attached_assets/       # Static assets (QR code)\n```\n\n## API Endpoints\n\n### Authentication\n- `GET /api/auth/me` - Get current user\n\n### Configuration\n- `GET /api/config/marketplace` - Get marketplace config (UPI ID, commission rates)\n\n### Products\n- `GET /api/products/approved` - List approved products\n- `GET /api/products/:id` - Get product details\n- `GET /api/products/my` - Get seller's products\n- `POST /api/products` - Upload product (seller only)\n\n### Orders\n- `POST /api/orders` - Create order\n- `GET /api/orders/my` - Get seller's orders\n\n### Admin\n- `GET /api/admin/products/pending` - Pending approvals\n- `POST /api/admin/products/:id/approve` - Approve product\n- `POST /api/admin/products/:id/reject` - Reject product\n- `GET /api/admin/orders/pending` - Pending payments\n- `POST /api/admin/orders/:id/verify` - Verify payment\n- `POST /api/admin/orders/:id/reject` - Reject payment\n- `GET /api/admin/products/:id/download` - Download file\n- `GET /api/admin/logs` - Get audit logs\n\n## Troubleshooting\n\n### \"Firebase: Error (auth/invalid-api-key)\"\n- Check that all Firebase environment variables are set correctly in Replit Secrets or `.env`\n- Verify `VITE_FIREBASE_API_KEY`, `VITE_FIREBASE_PROJECT_ID`, `VITE_FIREBASE_APP_ID`\n- Make sure there are no extra spaces in the values\n\n### \"No authentication token provided\"\n- Sign in with Google first\n- Check that Firebase authentication is properly configured\n- Verify your domain is in Firebase Authorized Domains\n\n### Products not showing\n- Ensure products are approved by an admin\n- Check Admin Panel ‚Üí Pending Approvals\n- Verify Firestore is accessible\n\n### Upload failing\n- Check file size limits in `.env` configuration\n- Verify Firebase Storage is enabled in Firebase Console\n- Check browser console for detailed error messages\n- Ensure you have the \"seller\" role\n\n### Payment verification not working\n- Make sure you're logged in as admin\n- Check that the order exists in Firestore\n- Verify transaction ID is entered correctly\n\n### Configuration not loading\n- Verify all required environment variables are set\n- Check the Replit Secrets tab or `.env` file\n- Restart the application after adding new secrets\n\n### Service account errors\n- If using `FIREBASE_SERVICE_ACCOUNT`, ensure the JSON is valid\n- For Replit, paste the entire JSON as a single-line string in Secrets\n- Alternatively, leave it empty to use Application Default Credentials\n\n## Support\n\nFor issues or questions:\n1. Check the Firebase Console for errors\n2. Review Replit logs for backend errors\n3. Check browser console for frontend errors\n\n## License\n\nMIT License - feel free to use this for your own projects!\n\n## Credits\n\nBuilt with ‚ù§Ô∏è using Replit, Firebase, and modern web technologies.\n","size_bytes":13211}},"version":2}